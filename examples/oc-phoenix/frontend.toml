[shared]
jwt_secret = "Pive-Fumkiu4"
gatewaysvc = "localhost:19000"

# This frontend.toml config file will start a reva service that:
# - serves as the entrypoint for owncloud APIs.
# - serves http endpoints on port 20080
#   - / --------------- ocdav
#   - /ocs ------------ ocs
#   - /oauth2 --------- oidcprovider
#   - /.well-known ---- wellknown service to announce openid-configuration
#   - TODO(diocas): ocm
# - authenticates requests using oidc bearer auth and basic auth as fallback
# - serves the grpc services on port 18002
[grpc]
address = "0.0.0.0:20099"

[grpc.services.authprovider]
auth_manager = "oidc"

# If you want to use your own openid provider change this config
[grpc.services.authprovider.auth_managers.oidc]
issuer = "http://localhost:20080"

[http]
address = "0.0.0.0:20080"

[http.middlewares.cors]
allow_credentials = true

[http.services.wellknown]
issuer = "http://localhost:20080"
authorization_endpoint = "http://localhost:20080/oauth2/auth"
token_endpoint = "http://localhost:20080/oauth2/token" 
revocation_endpoint = "http://localhost:20080/oauth2/auth"
introspection_endpoint = "http://localhost:20080/oauth2/introspect"
userinfo_endpoint = "http://localhost:20080/oauth2/userinfo"

[http.services.oidcprovider]
prefix = "oauth2"
issuer = "http://localhost:20080"

[http.services.oidcprovider.clients.phoenix]
id = "phoenix"
redirect_uris = ["http://localhost:8300/oidc-callback.html", "http://localhost:8300/"]
grant_types = ["implicit", "refresh_token", "authorization_code", "password", "client_credentials"]
response_types = ["code"] # use authorization code flow, see https://developer.okta.com/blog/2019/05/01/is-the-oauth-implicit-flow-dead for details
scopes = ["openid", "profile", "email", "offline"]
public = true # force PKCS for public clients

[http.services.ocdav]
# serve ocdav on the root path
prefix = ""
chunk_folder = "/var/tmp/reva/chunks"
# for user lookups
# prefix the path of requests to /dav/files with this namespace
# While owncloud has only listed usernames at this endpoint CERN has
# been exposing more than just usernames. For owncloud deployments we
# can prefix the path to jail the requests to the correct CS3 namespace.
# In this deployment we mounted the owncloud storage provider at /oc. It
# expects a username as the first path segment.
# currently, only the desktop client will use this endpoint, but only if
# the dav.chunking capability is available
# TODO implement a path wrapper that rewrites `<username>` into the path
# layout for the users home?
# no, use GetHome?
# for eos we need to rewrite the path
# TODO strip the username from the path so the CS3 namespace can be mounted
# at the files/<username> endpoint? what about migration? separate reva instance
files_namespace = "/oc"

# similar to the dav/files endpoint we can configure a prefix for the old webdav endpoint
# we use the old webdav endpoint to present the cs3 namespace
# note: this changes the tree that is rendered at remote.php/webdav from the users home to the cs3 namespace
# use webdav_namespace = "/home" to use the old namespace that only exposes the users files
# this endpoint should not affect the desktop client sync but will present different folders for the other clients:
# - the desktop clients use a hardcoded remote.php/dav/files/<username> if the dav.chunkung capability is present
# - the ios ios uses the core.webdav-root capability which points to remote.php/webdav in oc10
# - the oc js sdk is hardcoded to the remote.php/webdav so it will see the new tree
# - TODO android? no sync ... but will see different tree
webdav_namespace = "/home"

[http.services.ocs]
