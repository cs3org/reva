# This standalone.oidc.toml config file will start a reva service that:
# - authenticates requests using openid connect
# - serves http requests on port 10000
#   - / - ocdav: owncloud webdav api
#   - /data - dataprovider: file up and download
#   - /oauth2 - an openid connect provider implementation for development
#   - /.well-known - used for openid connect discovery
#   - /metrics - prometheus: metrics
# - serves grpc requests on port 9999
#   - authprovider - provides basic auth
#   - storageprovider - handles storage metadata
#   - usershareprovider - provides user shares
#   - userprovider - provides user matadata (used to look up email, displayname etc after a login)
#   - preferences - provides user preferences
#   - gateway: to lookup services and authenticate requests
#   - authregistry - used by the gateway to look up auth providers
#   - storageregistry - used by the gateway to look up storage providers

[core]
max_cpus = "2" # defaults to runtime.NumCPU()
#tracing_enabled = false
#tracing_endpoint = "localhost:6831"
#tracing_collector = "http://localhost:14268/api/traces"
#tracing_service_name = "revad"

[log]
level = "debug"
#mode = "console" # "console" or "json"
#output = "./standalone.log"

[http]
#network = "tcp"
# allow access from any host, not only localhost
address = "0.0.0.0:10000" # "localhost:9998"
enabled_services = ["dataprovider", "ocdav", "prometheus", "wellknown", "oidcprovider", "ocs"]
enabled_middlewares = ["cors", "auth"]

[http.middlewares.auth]
gateway = "localhost:9999"
auth_type = "oidc" # used to look up the authprovider in the authregistry by the gateway
credential_strategy = "oidc"
token_strategy = "header"
token_writer = "header"
token_manager = "jwt"
skip_methods = [
	"/favicon.ico",
	"/status.php",
	"/oauth2",
	"/oauth2/auth", 
	"/oauth2/token",
	# TODO protect the introspection endpoint from external requests.
	# should only be reachable by internal services, which is why the
	# oidc-provider.toml has clientid and secret that are used for a basic auth
	"/oauth2/introspect",
	"/oauth2/userinfo",
	"/oauth2/sessions",
	"/.well-known/openid-configuration",
	"/metrics"
]

[http.middlewares.auth.token_managers.jwt]
secret = "Pive-Fumkiu4"

[http.middlewares.cors]
allowed_origins = ["*"]
allowed_methods = ["OPTIONS", "GET", "PUT", "POST", "DELETE", "MKCOL", "PROPFIND", "PROPPATCH", "MOVE", "COPY", "REPORT", "SEARCH"]
allowed_headers = ["Origin", "Accept", "Depth", "Content-Type", "X-Requested-With", "Authorization", "Ocs-Apirequest", "If-None-Match"]
allow_credentials = true
options_passthrough = false

[http.services.wellknown]
issuer = "http://localhost:10000"
authorization_endpoint = "http://localhost:10000/oauth2/auth"
token_endpoint = "http://localhost:10000/oauth2/token" 
#jwks_uri = ""
revocation_endpoint = "http://localhost:10000/oauth2/auth"
introspection_endpoint = "http://localhost:10000/oauth2/introspect"
userinfo_endpoint = "http://localhost:10000/oauth2/userinfo"
#end_session_endpoint = 

[http.services.oidcprovider]
prefix = "oauth2"
gateway = "localhost:9999"
auth_type = "basic"
issuer = "http://localhost:10000"

[http.services.oidcprovider.clients.phoenix]
id = "phoenix"
redirect_uris = ["http://localhost:8300/oidc-callback.html", "http://localhost:8300/"]
grant_types = ["implicit", "refresh_token", "authorization_code", "password", "client_credentials"]
response_types = ["code"] # use authorization code flow, see https://developer.okta.com/blog/2019/05/01/is-the-oauth-implicit-flow-dead for details
scopes = ["openid", "profile", "email", "offline"]
public = true # force PKCS for public clients

[http.services.oidcprovider.clients.reva]
id = "reva"
grant_types = ["implicit", "refresh_token", "authorization_code", "password", "client_credentials"]
response_types = ["code"] # use authorization code flow
# private clients can use a secret
client_secret = "$2a$10$IxMdI6d.LIRZPpSfEwNoeu4rY3FhDREsxFJXikcgdRRAStxUlsuEO"  # = "foobar"
scopes = ["openid", "profile", "email", "offline"]

# to debug the oidc provider allow https://oidcdebugger.com
[http.services.oidcprovider.clients.oidcdebugger]
id = "oidcdebugger"
redirect_uris = ["https://oidcdebugger.com/debug"]
grant_types = ["implicit", "refresh_token", "authorization_code", "password", "client_credentials"]
response_types = ["id_token token", "code"]
client_secret = "$2a$10$IxMdI6d.LIRZPpSfEwNoeu4rY3FhDREsxFJXikcgdRRAStxUlsuEO"  # = "foobar"
scopes = ["openid", "profile", "email", "offline"]

[http.services.dataprovider]
driver = "local"
prefix = "data"
tmp_folder = "/var/tmp/"

[http.services.dataprovider.drivers.local]
root = "/var/tmp/reva/data"

[http.services.ocdav]
prefix = ""
chunk_folder = "/var/tmp/revad/chunks"
gateway = "localhost:9999"

[grpc]
#network = "tcp"
# allow access from any host, not only localhost
address = "0.0.0.0:9999" # "localhost:9999"
enabled_services = [
    "authprovider",         # provides basic auth
    "storageprovider",      # handles storage metadata
    "usershareprovider",    # provides user shares
    "userprovider",         # provides user matadata (used to look up email, displayname etc after a login)
    "preferences",          # provides user preferences
    "gateway",              # to lookup services and authenticate requests
    "authregistry",         # used by the gateway to look up auth providers
    "storageregistry",      # used by the gateway to look up storage providers
]
enabled_interceptors = ["auth"]

[grpc.interceptors.auth]
token_manager = "jwt"
#header   = "x-access-token"
skip_methods = [
    # we need to allow calls that happen during authentication
	"/cs3.gatewayv0alpha.GatewayService/Authenticate",
	"/cs3.gatewayv0alpha.GatewayService/WhoAmI",
	"/cs3.gatewayv0alpha.GatewayService/GetUser",
	"/cs3.gatewayv0alpha.GatewayService/ListAuthProviders",
	"/cs3.authregistryv0alpha.AuthRegistryService/ListAuthProviders",
	"/cs3.authregistryv0alpha.AuthRegistryService/GetAuthProvider",
	"/cs3.authproviderv0alpha.AuthProviderService/Authenticate",
	"/cs3.userproviderv0alpha.UserProviderService/GetUser",
]

[grpc.interceptors.auth.token_managers.jwt]
secret = "Pive-Fumkiu4"

[grpc.services.userprovider]
driver = "json"

[grpc.services.userprovider.drivers.json]
users = "./examples/users.demo.json"

[grpc.services.authregistry]
driver = "static"

[grpc.services.authregistry.drivers.static.rules]
basic = "localhost:9999"
# needs to be started as a second service using the oidc-provider.toml
oidc = "localhost:9998"

[grpc.services.usershareprovider]
driver = "memory"

[grpc.services.storageprovider]
driver = "local"
mount_path = "/"
mount_id = "123e4567-e89b-12d3-a456-426655440000"
data_server_url = "http://localhost:10000/data"
expose_data_server = true

[grpc.services.storageprovider.available_checksums]
md5   = 100
unset = 1000

[grpc.services.storageprovider.drivers.local]
root = "/var/tmp/reva/data"

# cannot be started in the same process because it has to serve the same
# "/cs3.authproviderv0alpha.AuthProviderService/Authenticate" request as the oidcprovider
[grpc.services.authprovider]
auth_manager = "json"
userprovidersvc = "localhost:9999"

[grpc.services.authprovider.auth_managers.json]
users = "./examples/users.demo.json"

[grpc.services.storageregistry]
driver = "static"

[grpc.services.storageregistry.drivers.static.rules]
"/" = "localhost:9999"
"123e4567-e89b-12d3-a456-426655440000" = "localhost:9999"

[grpc.services.gateway]
authregistrysvc = "localhost:9999"
storageregistrysvc = "localhost:9999"
appregistrysvc = "localhost:9999"
preferencessvc = "localhost:9999"
usershareprovidersvc = "localhost:9999"
publicshareprovidersvc = "localhost:9999"
ocmshareprovidersvc = "localhost:9999"
userprovidersvc = "localhost:9999"
commit_share_to_storage_grant = true
datagateway = "http://localhost:10000/data"
transfer_shared_secret = "replace-me-with-a-transfer-secret"
transfer_expires = 6 # give it a moment
token_manager = "jwt"

[grpc.services.gateway.token_managers.jwt]
secret = "Pive-Fumkiu4"
