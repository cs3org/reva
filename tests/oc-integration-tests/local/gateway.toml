# This config file will start a reva service that:
# - serves as a gateway for all CS3 requests
# - looks up the storageprovider using a storageregistry
# - looks up the authprovider using an authregistry
# - serves the gateway on grpc port 19000
# - serves http datagateway on port 19001
#   - /data - datagateway: file up and download

[shared]
jwt_secret = "Pive-Fumkiu4"
gatewaysvc = "localhost:19000"

[log]
#level = "warn"
#mode = "json"

[grpc]
address = "0.0.0.0:19000"

[grpc.services.gateway]
# registries
authregistrysvc = "localhost:19000"
storageregistrysvc = "localhost:19000"
# user metadata
preferencessvc = "localhost:18000"
userprovidersvc = "localhost:18000"
groupprovidersvc = "localhost:18000"
# an approvider lives on "localhost:18000" as well, see users.toml
# sharing
usershareprovidersvc = "localhost:17000"
publicshareprovidersvc = "localhost:17000"
# ocm
ocmcoresvc = "localhost:14000"
ocmshareprovidersvc = "localhost:14000"
ocminvitemanagersvc = "localhost:14000"
ocmproviderauthorizersvc = "localhost:14000"
# other
commit_share_to_storage_grant = true
commit_share_to_storage_ref = true
share_folder = "Shares"
datagateway = "http://localhost:19001/data"
transfer_shared_secret = "replace-me-with-a-transfer-secret" # for direct uploads
transfer_expires = 6 # give it a moment
#disable_home_creation_on_login = true
link_grants_file = "/var/tmp/reva/link_grants_file.json"
create_home_cache_ttl = 10


[grpc.services.authregistry]
driver = "static"

[grpc.services.authregistry.drivers.static.rules]
publicshares = "localhost:17000" # started with the shares.toml
basic = "localhost:18000" # started with the users.toml
bearer = "localhost:20099" # started with the frontend.toml
machine = "localhost:21000" # started with the machine-auth.toml

[grpc.services.storageregistry]
driver = "spaces"

[grpc.services.storageregistry.drivers.spaces]
home_template = "/users/{{.Id.OpaqueId}}"

## obviously, we do not want to define a rule for every user and space, which is why we can define naming rules:
[grpc.services.storageregistry.drivers.spaces.providers."localhost:11000".spaces]
"personal" = { "mount_point" = "/users", "path_template" = "/users/{{.Space.Owner.Id.OpaqueId}}" }

## users can be spread over multiple providers like this:
#"localhost:11000" = {"mount_path" = "/users/[0-9]", "space_type" = "personal", "path_template" = "/users/{{.Space.Owner.Id.OpaqueId}}", "description" = "personal spaces 0-9"}
#"localhost:11010" = {"mount_path" = "/users/[a-f]", "space_type" = "personal", "path_template" = "/users/{{.Space.Owner.Id.OpaqueId}}", "description" = "personal spaces a-f"}

## the virtual /Shares folder of every user is routed like this:
## whenever the path matches the pattern /users/{{.CurrentUser.Id.OpaqueId}}/Shares we forward requests to the sharesstorageprovider
[grpc.services.storageregistry.drivers.spaces.providers."localhost:14000".spaces]
"virtual" = { "mount_point" = "/users/{{.CurrentUser.Id.OpaqueId}}/Shares" }
"grant" = { "mount_point" = "." }
"mountpoint" = { "mount_point" = "/users/{{.CurrentUser.Id.OpaqueId}}/Shares", "path_template" = "/users/{{.CurrentUser.Id.OpaqueId}}/Shares/{{.Space.Name}}" }

## An alternative would be used to mount shares outside of the users home:
#"localhost:14000" = {"mount_path" = "/shares", "space_type" = "share", "path_template" = "/shares/{{.Space.Name}}", "description" = "shares"}

## While public shares are mounted at /public logged in end will should never see that path because it is only created by the spaces registry when
## a public link is accessed.
[grpc.services.storageregistry.drivers.spaces.providers."localhost:13000".spaces]
"public" = { "mount_point" = "/public" }

[http]
address = "0.0.0.0:19001"

[http.services.datagateway]
transfer_shared_secret = "replace-me-with-a-transfer-secret"
