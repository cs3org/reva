// Copyright 2018-2022 CERN
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// In applying this license, CERN does not waive the privileges and immunities
// granted to it by virtue of its status as an Intergovernmental Organization
// or submit itself to any jurisdiction.

// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	indexer "github.com/cs3org/reva/v2/pkg/storage/utils/indexer"
	mock "github.com/stretchr/testify/mock"

	option "github.com/cs3org/reva/v2/pkg/storage/utils/indexer/option"
)

// Indexer is an autogenerated mock type for the Indexer type
type Indexer struct {
	mock.Mock
}

// Add provides a mock function with given fields: t
func (_m *Indexer) Add(t interface{}) ([]indexer.IdxAddResult, error) {
	ret := _m.Called(t)

	var r0 []indexer.IdxAddResult
	if rf, ok := ret.Get(0).(func(interface{}) []indexer.IdxAddResult); ok {
		r0 = rf(t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]indexer.IdxAddResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddIndex provides a mock function with given fields: t, indexBy, pkName, entityDirName, indexType, bound, caseInsensitive
func (_m *Indexer) AddIndex(t interface{}, indexBy option.IndexBy, pkName string, entityDirName string, indexType string, bound *option.Bound, caseInsensitive bool) error {
	ret := _m.Called(t, indexBy, pkName, entityDirName, indexType, bound, caseInsensitive)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, option.IndexBy, string, string, string, *option.Bound, bool) error); ok {
		r0 = rf(t, indexBy, pkName, entityDirName, indexType, bound, caseInsensitive)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: t
func (_m *Indexer) Delete(t interface{}) error {
	ret := _m.Called(t)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindBy provides a mock function with given fields: t, fields
func (_m *Indexer) FindBy(t interface{}, fields ...indexer.Field) ([]string, error) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, t)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []string
	if rf, ok := ret.Get(0).(func(interface{}, ...indexer.Field) []string); ok {
		r0 = rf(t, fields...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, ...indexer.Field) error); ok {
		r1 = rf(t, fields...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIndexer interface {
	mock.TestingT
	Cleanup(func())
}

// NewIndexer creates a new instance of Indexer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIndexer(t mockConstructorTestingTNewIndexer) *Indexer {
	mock := &Indexer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
