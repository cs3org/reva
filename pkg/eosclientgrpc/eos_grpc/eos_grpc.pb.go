// Copyright 2018-2020 CERN
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// In applying this license, CERN does not waive the privileges and immunities
// granted to it by virtue of its status as an Intergovernmental Organization
// or submit itself to any jurisdiction.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: eos_grpc.proto

/*
Package eos_grpc is a generated protocol buffer package.

It is generated from these files:
	eos_grpc.proto

It has these top-level messages:
	PingRequest
	PingReply
	ContainerInsertRequest
	FileInsertRequest
	InsertReply
	Time
	Checksum
	FileMdProto
	ContainerMdProto
	RoleId
	MDId
	Limit
	MDSelection
	MDRequest
	MDResponse
	FindRequest
	ShareAuth
	ShareProto
	ShareToken
	NSRequest
	NSResponse
	NsStatRequest
	NsStatResponse
	ManilaRequest
	ManilaResponse
*/
package eos_grpc

import (
	fmt "fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TYPE int32

const (
	TYPE_FILE      TYPE = 0
	TYPE_CONTAINER TYPE = 1
	TYPE_LISTING   TYPE = 2
)

var TYPE_name = map[int32]string{
	0: "FILE",
	1: "CONTAINER",
	2: "LISTING",
}
var TYPE_value = map[string]int32{
	"FILE":      0,
	"CONTAINER": 1,
	"LISTING":   2,
}

func (x TYPE) String() string {
	return proto.EnumName(TYPE_name, int32(x))
}
func (TYPE) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type MANILA_REQUEST_TYPE int32

const (
	MANILA_REQUEST_TYPE_CREATE_SHARE    MANILA_REQUEST_TYPE = 0
	MANILA_REQUEST_TYPE_DELETE_SHARE    MANILA_REQUEST_TYPE = 1
	MANILA_REQUEST_TYPE_EXTEND_SHARE    MANILA_REQUEST_TYPE = 2
	MANILA_REQUEST_TYPE_SHRINK_SHARE    MANILA_REQUEST_TYPE = 3
	MANILA_REQUEST_TYPE_MANAGE_EXISTING MANILA_REQUEST_TYPE = 4
	MANILA_REQUEST_TYPE_UNMANAGE        MANILA_REQUEST_TYPE = 5
	MANILA_REQUEST_TYPE_GET_CAPACITIES  MANILA_REQUEST_TYPE = 6
)

var MANILA_REQUEST_TYPE_name = map[int32]string{
	0: "CREATE_SHARE",
	1: "DELETE_SHARE",
	2: "EXTEND_SHARE",
	3: "SHRINK_SHARE",
	4: "MANAGE_EXISTING",
	5: "UNMANAGE",
	6: "GET_CAPACITIES",
}
var MANILA_REQUEST_TYPE_value = map[string]int32{
	"CREATE_SHARE":    0,
	"DELETE_SHARE":    1,
	"EXTEND_SHARE":    2,
	"SHRINK_SHARE":    3,
	"MANAGE_EXISTING": 4,
	"UNMANAGE":        5,
	"GET_CAPACITIES":  6,
}

func (x MANILA_REQUEST_TYPE) String() string {
	return proto.EnumName(MANILA_REQUEST_TYPE_name, int32(x))
}
func (MANILA_REQUEST_TYPE) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type NSRequest_VersionRequest_VERSION_CMD int32

const (
	NSRequest_VersionRequest_CREATE NSRequest_VersionRequest_VERSION_CMD = 0
	NSRequest_VersionRequest_PURGE  NSRequest_VersionRequest_VERSION_CMD = 1
	NSRequest_VersionRequest_LIST   NSRequest_VersionRequest_VERSION_CMD = 2
)

var NSRequest_VersionRequest_VERSION_CMD_name = map[int32]string{
	0: "CREATE",
	1: "PURGE",
	2: "LIST",
}
var NSRequest_VersionRequest_VERSION_CMD_value = map[string]int32{
	"CREATE": 0,
	"PURGE":  1,
	"LIST":   2,
}

func (x NSRequest_VersionRequest_VERSION_CMD) String() string {
	return proto.EnumName(NSRequest_VersionRequest_VERSION_CMD_name, int32(x))
}
func (NSRequest_VersionRequest_VERSION_CMD) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{19, 7, 0}
}

type NSRequest_AclRequest_ACL_COMMAND int32

const (
	NSRequest_AclRequest_NONE   NSRequest_AclRequest_ACL_COMMAND = 0
	NSRequest_AclRequest_MODIFY NSRequest_AclRequest_ACL_COMMAND = 1
	NSRequest_AclRequest_LIST   NSRequest_AclRequest_ACL_COMMAND = 2
)

var NSRequest_AclRequest_ACL_COMMAND_name = map[int32]string{
	0: "NONE",
	1: "MODIFY",
	2: "LIST",
}
var NSRequest_AclRequest_ACL_COMMAND_value = map[string]int32{
	"NONE":   0,
	"MODIFY": 1,
	"LIST":   2,
}

func (x NSRequest_AclRequest_ACL_COMMAND) String() string {
	return proto.EnumName(NSRequest_AclRequest_ACL_COMMAND_name, int32(x))
}
func (NSRequest_AclRequest_ACL_COMMAND) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{19, 12, 0}
}

type NSRequest_AclRequest_ACL_TYPE int32

const (
	NSRequest_AclRequest_USER_ACL NSRequest_AclRequest_ACL_TYPE = 0
	NSRequest_AclRequest_SYS_ACL  NSRequest_AclRequest_ACL_TYPE = 1
)

var NSRequest_AclRequest_ACL_TYPE_name = map[int32]string{
	0: "USER_ACL",
	1: "SYS_ACL",
}
var NSRequest_AclRequest_ACL_TYPE_value = map[string]int32{
	"USER_ACL": 0,
	"SYS_ACL":  1,
}

func (x NSRequest_AclRequest_ACL_TYPE) String() string {
	return proto.EnumName(NSRequest_AclRequest_ACL_TYPE_name, int32(x))
}
func (NSRequest_AclRequest_ACL_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{19, 12, 1}
}

type PingRequest struct {
	Authkey string `protobuf:"bytes,1,opt,name=authkey" json:"authkey,omitempty"`
	Message []byte `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PingRequest) GetAuthkey() string {
	if m != nil {
		return m.Authkey
	}
	return ""
}

func (m *PingRequest) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

type PingReply struct {
	Message []byte `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *PingReply) Reset()                    { *m = PingReply{} }
func (m *PingReply) String() string            { return proto.CompactTextString(m) }
func (*PingReply) ProtoMessage()               {}
func (*PingReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PingReply) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

type ContainerInsertRequest struct {
	Container []*ContainerMdProto `protobuf:"bytes,1,rep,name=container" json:"container,omitempty"`
	Authkey   string              `protobuf:"bytes,2,opt,name=authkey" json:"authkey,omitempty"`
	InheritMd bool                `protobuf:"varint,3,opt,name=inherit_md,json=inheritMd" json:"inherit_md,omitempty"`
}

func (m *ContainerInsertRequest) Reset()                    { *m = ContainerInsertRequest{} }
func (m *ContainerInsertRequest) String() string            { return proto.CompactTextString(m) }
func (*ContainerInsertRequest) ProtoMessage()               {}
func (*ContainerInsertRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ContainerInsertRequest) GetContainer() []*ContainerMdProto {
	if m != nil {
		return m.Container
	}
	return nil
}

func (m *ContainerInsertRequest) GetAuthkey() string {
	if m != nil {
		return m.Authkey
	}
	return ""
}

func (m *ContainerInsertRequest) GetInheritMd() bool {
	if m != nil {
		return m.InheritMd
	}
	return false
}

type FileInsertRequest struct {
	Files   []*FileMdProto `protobuf:"bytes,1,rep,name=files" json:"files,omitempty"`
	Authkey string         `protobuf:"bytes,2,opt,name=authkey" json:"authkey,omitempty"`
}

func (m *FileInsertRequest) Reset()                    { *m = FileInsertRequest{} }
func (m *FileInsertRequest) String() string            { return proto.CompactTextString(m) }
func (*FileInsertRequest) ProtoMessage()               {}
func (*FileInsertRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FileInsertRequest) GetFiles() []*FileMdProto {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *FileInsertRequest) GetAuthkey() string {
	if m != nil {
		return m.Authkey
	}
	return ""
}

type InsertReply struct {
	Message []string `protobuf:"bytes,1,rep,name=message" json:"message,omitempty"`
	Retc    []uint32 `protobuf:"varint,2,rep,packed,name=retc" json:"retc,omitempty"`
}

func (m *InsertReply) Reset()                    { *m = InsertReply{} }
func (m *InsertReply) String() string            { return proto.CompactTextString(m) }
func (*InsertReply) ProtoMessage()               {}
func (*InsertReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *InsertReply) GetMessage() []string {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *InsertReply) GetRetc() []uint32 {
	if m != nil {
		return m.Retc
	}
	return nil
}

type Time struct {
	Sec  uint64 `protobuf:"varint,1,opt,name=sec" json:"sec,omitempty"`
	NSec uint64 `protobuf:"varint,2,opt,name=n_sec,json=nSec" json:"n_sec,omitempty"`
}

func (m *Time) Reset()                    { *m = Time{} }
func (m *Time) String() string            { return proto.CompactTextString(m) }
func (*Time) ProtoMessage()               {}
func (*Time) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Time) GetSec() uint64 {
	if m != nil {
		return m.Sec
	}
	return 0
}

func (m *Time) GetNSec() uint64 {
	if m != nil {
		return m.NSec
	}
	return 0
}

type Checksum struct {
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Type  string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
}

func (m *Checksum) Reset()                    { *m = Checksum{} }
func (m *Checksum) String() string            { return proto.CompactTextString(m) }
func (*Checksum) ProtoMessage()               {}
func (*Checksum) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Checksum) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Checksum) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type FileMdProto struct {
	Id              uint64            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ContId          uint64            `protobuf:"varint,2,opt,name=cont_id,json=contId" json:"cont_id,omitempty"`
	Uid             uint64            `protobuf:"varint,3,opt,name=uid" json:"uid,omitempty"`
	Gid             uint64            `protobuf:"varint,4,opt,name=gid" json:"gid,omitempty"`
	Size            uint64            `protobuf:"varint,5,opt,name=size" json:"size,omitempty"`
	LayoutId        uint32            `protobuf:"varint,6,opt,name=layout_id,json=layoutId" json:"layout_id,omitempty"`
	Flags           uint32            `protobuf:"varint,7,opt,name=flags" json:"flags,omitempty"`
	Name            []byte            `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	LinkName        []byte            `protobuf:"bytes,9,opt,name=link_name,json=linkName,proto3" json:"link_name,omitempty"`
	Ctime           *Time             `protobuf:"bytes,10,opt,name=ctime" json:"ctime,omitempty"`
	Mtime           *Time             `protobuf:"bytes,11,opt,name=mtime" json:"mtime,omitempty"`
	Checksum        *Checksum         `protobuf:"bytes,12,opt,name=checksum" json:"checksum,omitempty"`
	Locations       []uint32          `protobuf:"varint,13,rep,packed,name=locations" json:"locations,omitempty"`
	UnlinkLocations []uint32          `protobuf:"varint,14,rep,packed,name=unlink_locations,json=unlinkLocations" json:"unlink_locations,omitempty"`
	Xattrs          map[string][]byte `protobuf:"bytes,15,rep,name=xattrs" json:"xattrs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Path            []byte            `protobuf:"bytes,16,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *FileMdProto) Reset()                    { *m = FileMdProto{} }
func (m *FileMdProto) String() string            { return proto.CompactTextString(m) }
func (*FileMdProto) ProtoMessage()               {}
func (*FileMdProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *FileMdProto) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FileMdProto) GetContId() uint64 {
	if m != nil {
		return m.ContId
	}
	return 0
}

func (m *FileMdProto) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *FileMdProto) GetGid() uint64 {
	if m != nil {
		return m.Gid
	}
	return 0
}

func (m *FileMdProto) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *FileMdProto) GetLayoutId() uint32 {
	if m != nil {
		return m.LayoutId
	}
	return 0
}

func (m *FileMdProto) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *FileMdProto) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *FileMdProto) GetLinkName() []byte {
	if m != nil {
		return m.LinkName
	}
	return nil
}

func (m *FileMdProto) GetCtime() *Time {
	if m != nil {
		return m.Ctime
	}
	return nil
}

func (m *FileMdProto) GetMtime() *Time {
	if m != nil {
		return m.Mtime
	}
	return nil
}

func (m *FileMdProto) GetChecksum() *Checksum {
	if m != nil {
		return m.Checksum
	}
	return nil
}

func (m *FileMdProto) GetLocations() []uint32 {
	if m != nil {
		return m.Locations
	}
	return nil
}

func (m *FileMdProto) GetUnlinkLocations() []uint32 {
	if m != nil {
		return m.UnlinkLocations
	}
	return nil
}

func (m *FileMdProto) GetXattrs() map[string][]byte {
	if m != nil {
		return m.Xattrs
	}
	return nil
}

func (m *FileMdProto) GetPath() []byte {
	if m != nil {
		return m.Path
	}
	return nil
}

type ContainerMdProto struct {
	Id       uint64            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ParentId uint64            `protobuf:"varint,2,opt,name=parent_id,json=parentId" json:"parent_id,omitempty"`
	Uid      uint64            `protobuf:"varint,3,opt,name=uid" json:"uid,omitempty"`
	Gid      uint64            `protobuf:"varint,4,opt,name=gid" json:"gid,omitempty"`
	TreeSize int64             `protobuf:"varint,6,opt,name=tree_size,json=treeSize" json:"tree_size,omitempty"`
	Mode     uint32            `protobuf:"varint,5,opt,name=mode" json:"mode,omitempty"`
	Flags    uint32            `protobuf:"varint,7,opt,name=flags" json:"flags,omitempty"`
	Name     []byte            `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	Ctime    *Time             `protobuf:"bytes,9,opt,name=ctime" json:"ctime,omitempty"`
	Mtime    *Time             `protobuf:"bytes,10,opt,name=mtime" json:"mtime,omitempty"`
	Stime    *Time             `protobuf:"bytes,11,opt,name=stime" json:"stime,omitempty"`
	Xattrs   map[string][]byte `protobuf:"bytes,12,rep,name=xattrs" json:"xattrs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Path     []byte            `protobuf:"bytes,13,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *ContainerMdProto) Reset()                    { *m = ContainerMdProto{} }
func (m *ContainerMdProto) String() string            { return proto.CompactTextString(m) }
func (*ContainerMdProto) ProtoMessage()               {}
func (*ContainerMdProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ContainerMdProto) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ContainerMdProto) GetParentId() uint64 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *ContainerMdProto) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ContainerMdProto) GetGid() uint64 {
	if m != nil {
		return m.Gid
	}
	return 0
}

func (m *ContainerMdProto) GetTreeSize() int64 {
	if m != nil {
		return m.TreeSize
	}
	return 0
}

func (m *ContainerMdProto) GetMode() uint32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *ContainerMdProto) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ContainerMdProto) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ContainerMdProto) GetCtime() *Time {
	if m != nil {
		return m.Ctime
	}
	return nil
}

func (m *ContainerMdProto) GetMtime() *Time {
	if m != nil {
		return m.Mtime
	}
	return nil
}

func (m *ContainerMdProto) GetStime() *Time {
	if m != nil {
		return m.Stime
	}
	return nil
}

func (m *ContainerMdProto) GetXattrs() map[string][]byte {
	if m != nil {
		return m.Xattrs
	}
	return nil
}

func (m *ContainerMdProto) GetPath() []byte {
	if m != nil {
		return m.Path
	}
	return nil
}

type RoleId struct {
	Uid       uint64 `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Gid       uint64 `protobuf:"varint,2,opt,name=gid" json:"gid,omitempty"`
	Username  string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
	Groupname string `protobuf:"bytes,4,opt,name=groupname" json:"groupname,omitempty"`
}

func (m *RoleId) Reset()                    { *m = RoleId{} }
func (m *RoleId) String() string            { return proto.CompactTextString(m) }
func (*RoleId) ProtoMessage()               {}
func (*RoleId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RoleId) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RoleId) GetGid() uint64 {
	if m != nil {
		return m.Gid
	}
	return 0
}

func (m *RoleId) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *RoleId) GetGroupname() string {
	if m != nil {
		return m.Groupname
	}
	return ""
}

type MDId struct {
	Path []byte `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Id   uint64 `protobuf:"fixed64,2,opt,name=id" json:"id,omitempty"`
	Ino  uint64 `protobuf:"fixed64,3,opt,name=ino" json:"ino,omitempty"`
	Type TYPE   `protobuf:"varint,4,opt,name=type,enum=eos.rpc.TYPE" json:"type,omitempty"`
}

func (m *MDId) Reset()                    { *m = MDId{} }
func (m *MDId) String() string            { return proto.CompactTextString(m) }
func (*MDId) ProtoMessage()               {}
func (*MDId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *MDId) GetPath() []byte {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *MDId) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MDId) GetIno() uint64 {
	if m != nil {
		return m.Ino
	}
	return 0
}

func (m *MDId) GetType() TYPE {
	if m != nil {
		return m.Type
	}
	return TYPE_FILE
}

type Limit struct {
	Zero bool   `protobuf:"varint,1,opt,name=zero" json:"zero,omitempty"`
	Min  uint64 `protobuf:"varint,2,opt,name=min" json:"min,omitempty"`
	Max  uint64 `protobuf:"varint,3,opt,name=max" json:"max,omitempty"`
}

func (m *Limit) Reset()                    { *m = Limit{} }
func (m *Limit) String() string            { return proto.CompactTextString(m) }
func (*Limit) ProtoMessage()               {}
func (*Limit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Limit) GetZero() bool {
	if m != nil {
		return m.Zero
	}
	return false
}

func (m *Limit) GetMin() uint64 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *Limit) GetMax() uint64 {
	if m != nil {
		return m.Max
	}
	return 0
}

type MDSelection struct {
	Select            bool              `protobuf:"varint,1,opt,name=select" json:"select,omitempty"`
	Ctime             *Limit            `protobuf:"bytes,2,opt,name=ctime" json:"ctime,omitempty"`
	Mtime             *Limit            `protobuf:"bytes,3,opt,name=mtime" json:"mtime,omitempty"`
	Stime             *Limit            `protobuf:"bytes,4,opt,name=stime" json:"stime,omitempty"`
	Size              *Limit            `protobuf:"bytes,5,opt,name=size" json:"size,omitempty"`
	Treesize          *Limit            `protobuf:"bytes,6,opt,name=treesize" json:"treesize,omitempty"`
	Children          *Limit            `protobuf:"bytes,7,opt,name=children" json:"children,omitempty"`
	Locations         *Limit            `protobuf:"bytes,8,opt,name=locations" json:"locations,omitempty"`
	UnlinkedLocations *Limit            `protobuf:"bytes,9,opt,name=unlinked_locations,json=unlinkedLocations" json:"unlinked_locations,omitempty"`
	Layoutid          uint64            `protobuf:"varint,10,opt,name=layoutid" json:"layoutid,omitempty"`
	Flags             uint64            `protobuf:"varint,11,opt,name=flags" json:"flags,omitempty"`
	Symlink           bool              `protobuf:"varint,12,opt,name=symlink" json:"symlink,omitempty"`
	Checksum          *Checksum         `protobuf:"bytes,13,opt,name=checksum" json:"checksum,omitempty"`
	Owner             uint32            `protobuf:"varint,14,opt,name=owner" json:"owner,omitempty"`
	Group             uint32            `protobuf:"varint,15,opt,name=group" json:"group,omitempty"`
	OwnerRoot         bool              `protobuf:"varint,16,opt,name=owner_root,json=ownerRoot" json:"owner_root,omitempty"`
	GroupRoot         bool              `protobuf:"varint,17,opt,name=group_root,json=groupRoot" json:"group_root,omitempty"`
	RegexpFilename    []byte            `protobuf:"bytes,18,opt,name=regexp_filename,json=regexpFilename,proto3" json:"regexp_filename,omitempty"`
	RegexpDirname     []byte            `protobuf:"bytes,19,opt,name=regexp_dirname,json=regexpDirname,proto3" json:"regexp_dirname,omitempty"`
	Xattr             map[string][]byte `protobuf:"bytes,20,rep,name=xattr" json:"xattr,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *MDSelection) Reset()                    { *m = MDSelection{} }
func (m *MDSelection) String() string            { return proto.CompactTextString(m) }
func (*MDSelection) ProtoMessage()               {}
func (*MDSelection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *MDSelection) GetSelect() bool {
	if m != nil {
		return m.Select
	}
	return false
}

func (m *MDSelection) GetCtime() *Limit {
	if m != nil {
		return m.Ctime
	}
	return nil
}

func (m *MDSelection) GetMtime() *Limit {
	if m != nil {
		return m.Mtime
	}
	return nil
}

func (m *MDSelection) GetStime() *Limit {
	if m != nil {
		return m.Stime
	}
	return nil
}

func (m *MDSelection) GetSize() *Limit {
	if m != nil {
		return m.Size
	}
	return nil
}

func (m *MDSelection) GetTreesize() *Limit {
	if m != nil {
		return m.Treesize
	}
	return nil
}

func (m *MDSelection) GetChildren() *Limit {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *MDSelection) GetLocations() *Limit {
	if m != nil {
		return m.Locations
	}
	return nil
}

func (m *MDSelection) GetUnlinkedLocations() *Limit {
	if m != nil {
		return m.UnlinkedLocations
	}
	return nil
}

func (m *MDSelection) GetLayoutid() uint64 {
	if m != nil {
		return m.Layoutid
	}
	return 0
}

func (m *MDSelection) GetFlags() uint64 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *MDSelection) GetSymlink() bool {
	if m != nil {
		return m.Symlink
	}
	return false
}

func (m *MDSelection) GetChecksum() *Checksum {
	if m != nil {
		return m.Checksum
	}
	return nil
}

func (m *MDSelection) GetOwner() uint32 {
	if m != nil {
		return m.Owner
	}
	return 0
}

func (m *MDSelection) GetGroup() uint32 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *MDSelection) GetOwnerRoot() bool {
	if m != nil {
		return m.OwnerRoot
	}
	return false
}

func (m *MDSelection) GetGroupRoot() bool {
	if m != nil {
		return m.GroupRoot
	}
	return false
}

func (m *MDSelection) GetRegexpFilename() []byte {
	if m != nil {
		return m.RegexpFilename
	}
	return nil
}

func (m *MDSelection) GetRegexpDirname() []byte {
	if m != nil {
		return m.RegexpDirname
	}
	return nil
}

func (m *MDSelection) GetXattr() map[string][]byte {
	if m != nil {
		return m.Xattr
	}
	return nil
}

type MDRequest struct {
	Type      TYPE         `protobuf:"varint,1,opt,name=type,enum=eos.rpc.TYPE" json:"type,omitempty"`
	Id        *MDId        `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Authkey   string       `protobuf:"bytes,3,opt,name=authkey" json:"authkey,omitempty"`
	Role      *RoleId      `protobuf:"bytes,4,opt,name=role" json:"role,omitempty"`
	Selection *MDSelection `protobuf:"bytes,5,opt,name=selection" json:"selection,omitempty"`
}

func (m *MDRequest) Reset()                    { *m = MDRequest{} }
func (m *MDRequest) String() string            { return proto.CompactTextString(m) }
func (*MDRequest) ProtoMessage()               {}
func (*MDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *MDRequest) GetType() TYPE {
	if m != nil {
		return m.Type
	}
	return TYPE_FILE
}

func (m *MDRequest) GetId() *MDId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *MDRequest) GetAuthkey() string {
	if m != nil {
		return m.Authkey
	}
	return ""
}

func (m *MDRequest) GetRole() *RoleId {
	if m != nil {
		return m.Role
	}
	return nil
}

func (m *MDRequest) GetSelection() *MDSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

type MDResponse struct {
	Type TYPE              `protobuf:"varint,1,opt,name=type,enum=eos.rpc.TYPE" json:"type,omitempty"`
	Fmd  *FileMdProto      `protobuf:"bytes,2,opt,name=fmd" json:"fmd,omitempty"`
	Cmd  *ContainerMdProto `protobuf:"bytes,3,opt,name=cmd" json:"cmd,omitempty"`
}

func (m *MDResponse) Reset()                    { *m = MDResponse{} }
func (m *MDResponse) String() string            { return proto.CompactTextString(m) }
func (*MDResponse) ProtoMessage()               {}
func (*MDResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *MDResponse) GetType() TYPE {
	if m != nil {
		return m.Type
	}
	return TYPE_FILE
}

func (m *MDResponse) GetFmd() *FileMdProto {
	if m != nil {
		return m.Fmd
	}
	return nil
}

func (m *MDResponse) GetCmd() *ContainerMdProto {
	if m != nil {
		return m.Cmd
	}
	return nil
}

type FindRequest struct {
	Type      TYPE         `protobuf:"varint,1,opt,name=type,enum=eos.rpc.TYPE" json:"type,omitempty"`
	Id        *MDId        `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Role      *RoleId      `protobuf:"bytes,3,opt,name=role" json:"role,omitempty"`
	Authkey   string       `protobuf:"bytes,4,opt,name=authkey" json:"authkey,omitempty"`
	Maxdepth  uint64       `protobuf:"varint,5,opt,name=maxdepth" json:"maxdepth,omitempty"`
	Selection *MDSelection `protobuf:"bytes,6,opt,name=selection" json:"selection,omitempty"`
}

func (m *FindRequest) Reset()                    { *m = FindRequest{} }
func (m *FindRequest) String() string            { return proto.CompactTextString(m) }
func (*FindRequest) ProtoMessage()               {}
func (*FindRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *FindRequest) GetType() TYPE {
	if m != nil {
		return m.Type
	}
	return TYPE_FILE
}

func (m *FindRequest) GetId() *MDId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *FindRequest) GetRole() *RoleId {
	if m != nil {
		return m.Role
	}
	return nil
}

func (m *FindRequest) GetAuthkey() string {
	if m != nil {
		return m.Authkey
	}
	return ""
}

func (m *FindRequest) GetMaxdepth() uint64 {
	if m != nil {
		return m.Maxdepth
	}
	return 0
}

func (m *FindRequest) GetSelection() *MDSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

type ShareAuth struct {
	Prot string `protobuf:"bytes,1,opt,name=prot" json:"prot,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Host string `protobuf:"bytes,3,opt,name=host" json:"host,omitempty"`
}

func (m *ShareAuth) Reset()                    { *m = ShareAuth{} }
func (m *ShareAuth) String() string            { return proto.CompactTextString(m) }
func (*ShareAuth) ProtoMessage()               {}
func (*ShareAuth) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ShareAuth) GetProt() string {
	if m != nil {
		return m.Prot
	}
	return ""
}

func (m *ShareAuth) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ShareAuth) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type ShareProto struct {
	Permission string       `protobuf:"bytes,1,opt,name=permission" json:"permission,omitempty"`
	Expires    uint64       `protobuf:"varint,2,opt,name=expires" json:"expires,omitempty"`
	Owner      string       `protobuf:"bytes,3,opt,name=owner" json:"owner,omitempty"`
	Group      string       `protobuf:"bytes,4,opt,name=group" json:"group,omitempty"`
	Generation uint64       `protobuf:"varint,5,opt,name=generation" json:"generation,omitempty"`
	Path       string       `protobuf:"bytes,6,opt,name=path" json:"path,omitempty"`
	Allowtree  bool         `protobuf:"varint,7,opt,name=allowtree" json:"allowtree,omitempty"`
	Vtoken     string       `protobuf:"bytes,8,opt,name=vtoken" json:"vtoken,omitempty"`
	Origins    []*ShareAuth `protobuf:"bytes,9,rep,name=origins" json:"origins,omitempty"`
}

func (m *ShareProto) Reset()                    { *m = ShareProto{} }
func (m *ShareProto) String() string            { return proto.CompactTextString(m) }
func (*ShareProto) ProtoMessage()               {}
func (*ShareProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ShareProto) GetPermission() string {
	if m != nil {
		return m.Permission
	}
	return ""
}

func (m *ShareProto) GetExpires() uint64 {
	if m != nil {
		return m.Expires
	}
	return 0
}

func (m *ShareProto) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *ShareProto) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *ShareProto) GetGeneration() uint64 {
	if m != nil {
		return m.Generation
	}
	return 0
}

func (m *ShareProto) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ShareProto) GetAllowtree() bool {
	if m != nil {
		return m.Allowtree
	}
	return false
}

func (m *ShareProto) GetVtoken() string {
	if m != nil {
		return m.Vtoken
	}
	return ""
}

func (m *ShareProto) GetOrigins() []*ShareAuth {
	if m != nil {
		return m.Origins
	}
	return nil
}

type ShareToken struct {
	Token      *ShareProto `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Signature  []byte      `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Serialized []byte      `protobuf:"bytes,3,opt,name=serialized,proto3" json:"serialized,omitempty"`
	Seed       int32       `protobuf:"varint,4,opt,name=seed" json:"seed,omitempty"`
}

func (m *ShareToken) Reset()                    { *m = ShareToken{} }
func (m *ShareToken) String() string            { return proto.CompactTextString(m) }
func (*ShareToken) ProtoMessage()               {}
func (*ShareToken) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ShareToken) GetToken() *ShareProto {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *ShareToken) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *ShareToken) GetSerialized() []byte {
	if m != nil {
		return m.Serialized
	}
	return nil
}

func (m *ShareToken) GetSeed() int32 {
	if m != nil {
		return m.Seed
	}
	return 0
}

type NSRequest struct {
	Authkey string  `protobuf:"bytes,1,opt,name=authkey" json:"authkey,omitempty"`
	Role    *RoleId `protobuf:"bytes,2,opt,name=role" json:"role,omitempty"`
	// Actual request data object
	//
	// Types that are valid to be assigned to Command:
	//	*NSRequest_Mkdir
	//	*NSRequest_Rmdir
	//	*NSRequest_Touch
	//	*NSRequest_Unlink
	//	*NSRequest_Rm
	//	*NSRequest_Rename
	//	*NSRequest_Symlink
	//	*NSRequest_Version
	//	*NSRequest_Recycle
	//	*NSRequest_Xattr
	//	*NSRequest_Chown
	//	*NSRequest_Chmod
	//	*NSRequest_Acl
	//	*NSRequest_Token
	Command isNSRequest_Command `protobuf_oneof:"command"`
}

func (m *NSRequest) Reset()                    { *m = NSRequest{} }
func (m *NSRequest) String() string            { return proto.CompactTextString(m) }
func (*NSRequest) ProtoMessage()               {}
func (*NSRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type isNSRequest_Command interface{ isNSRequest_Command() }

type NSRequest_Mkdir struct {
	Mkdir *NSRequest_MkdirRequest `protobuf:"bytes,21,opt,name=mkdir,oneof"`
}
type NSRequest_Rmdir struct {
	Rmdir *NSRequest_RmdirRequest `protobuf:"bytes,22,opt,name=rmdir,oneof"`
}
type NSRequest_Touch struct {
	Touch *NSRequest_TouchRequest `protobuf:"bytes,23,opt,name=touch,oneof"`
}
type NSRequest_Unlink struct {
	Unlink *NSRequest_UnlinkRequest `protobuf:"bytes,24,opt,name=unlink,oneof"`
}
type NSRequest_Rm struct {
	Rm *NSRequest_RmRequest `protobuf:"bytes,25,opt,name=rm,oneof"`
}
type NSRequest_Rename struct {
	Rename *NSRequest_RenameRequest `protobuf:"bytes,26,opt,name=rename,oneof"`
}
type NSRequest_Symlink struct {
	Symlink *NSRequest_SymlinkRequest `protobuf:"bytes,27,opt,name=symlink,oneof"`
}
type NSRequest_Version struct {
	Version *NSRequest_VersionRequest `protobuf:"bytes,28,opt,name=version,oneof"`
}
type NSRequest_Recycle struct {
	Recycle *NSRequest_RecycleRequest `protobuf:"bytes,29,opt,name=recycle,oneof"`
}
type NSRequest_Xattr struct {
	Xattr *NSRequest_SetXAttrRequest `protobuf:"bytes,30,opt,name=xattr,oneof"`
}
type NSRequest_Chown struct {
	Chown *NSRequest_ChownRequest `protobuf:"bytes,31,opt,name=chown,oneof"`
}
type NSRequest_Chmod struct {
	Chmod *NSRequest_ChmodRequest `protobuf:"bytes,32,opt,name=chmod,oneof"`
}
type NSRequest_Acl struct {
	Acl *NSRequest_AclRequest `protobuf:"bytes,33,opt,name=acl,oneof"`
}
type NSRequest_Token struct {
	Token *NSRequest_TokenRequest `protobuf:"bytes,34,opt,name=token,oneof"`
}

func (*NSRequest_Mkdir) isNSRequest_Command()   {}
func (*NSRequest_Rmdir) isNSRequest_Command()   {}
func (*NSRequest_Touch) isNSRequest_Command()   {}
func (*NSRequest_Unlink) isNSRequest_Command()  {}
func (*NSRequest_Rm) isNSRequest_Command()      {}
func (*NSRequest_Rename) isNSRequest_Command()  {}
func (*NSRequest_Symlink) isNSRequest_Command() {}
func (*NSRequest_Version) isNSRequest_Command() {}
func (*NSRequest_Recycle) isNSRequest_Command() {}
func (*NSRequest_Xattr) isNSRequest_Command()   {}
func (*NSRequest_Chown) isNSRequest_Command()   {}
func (*NSRequest_Chmod) isNSRequest_Command()   {}
func (*NSRequest_Acl) isNSRequest_Command()     {}
func (*NSRequest_Token) isNSRequest_Command()   {}

func (m *NSRequest) GetCommand() isNSRequest_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *NSRequest) GetAuthkey() string {
	if m != nil {
		return m.Authkey
	}
	return ""
}

func (m *NSRequest) GetRole() *RoleId {
	if m != nil {
		return m.Role
	}
	return nil
}

func (m *NSRequest) GetMkdir() *NSRequest_MkdirRequest {
	if x, ok := m.GetCommand().(*NSRequest_Mkdir); ok {
		return x.Mkdir
	}
	return nil
}

func (m *NSRequest) GetRmdir() *NSRequest_RmdirRequest {
	if x, ok := m.GetCommand().(*NSRequest_Rmdir); ok {
		return x.Rmdir
	}
	return nil
}

func (m *NSRequest) GetTouch() *NSRequest_TouchRequest {
	if x, ok := m.GetCommand().(*NSRequest_Touch); ok {
		return x.Touch
	}
	return nil
}

func (m *NSRequest) GetUnlink() *NSRequest_UnlinkRequest {
	if x, ok := m.GetCommand().(*NSRequest_Unlink); ok {
		return x.Unlink
	}
	return nil
}

func (m *NSRequest) GetRm() *NSRequest_RmRequest {
	if x, ok := m.GetCommand().(*NSRequest_Rm); ok {
		return x.Rm
	}
	return nil
}

func (m *NSRequest) GetRename() *NSRequest_RenameRequest {
	if x, ok := m.GetCommand().(*NSRequest_Rename); ok {
		return x.Rename
	}
	return nil
}

func (m *NSRequest) GetSymlink() *NSRequest_SymlinkRequest {
	if x, ok := m.GetCommand().(*NSRequest_Symlink); ok {
		return x.Symlink
	}
	return nil
}

func (m *NSRequest) GetVersion() *NSRequest_VersionRequest {
	if x, ok := m.GetCommand().(*NSRequest_Version); ok {
		return x.Version
	}
	return nil
}

func (m *NSRequest) GetRecycle() *NSRequest_RecycleRequest {
	if x, ok := m.GetCommand().(*NSRequest_Recycle); ok {
		return x.Recycle
	}
	return nil
}

func (m *NSRequest) GetXattr() *NSRequest_SetXAttrRequest {
	if x, ok := m.GetCommand().(*NSRequest_Xattr); ok {
		return x.Xattr
	}
	return nil
}

func (m *NSRequest) GetChown() *NSRequest_ChownRequest {
	if x, ok := m.GetCommand().(*NSRequest_Chown); ok {
		return x.Chown
	}
	return nil
}

func (m *NSRequest) GetChmod() *NSRequest_ChmodRequest {
	if x, ok := m.GetCommand().(*NSRequest_Chmod); ok {
		return x.Chmod
	}
	return nil
}

func (m *NSRequest) GetAcl() *NSRequest_AclRequest {
	if x, ok := m.GetCommand().(*NSRequest_Acl); ok {
		return x.Acl
	}
	return nil
}

func (m *NSRequest) GetToken() *NSRequest_TokenRequest {
	if x, ok := m.GetCommand().(*NSRequest_Token); ok {
		return x.Token
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*NSRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _NSRequest_OneofMarshaler, _NSRequest_OneofUnmarshaler, _NSRequest_OneofSizer, []interface{}{
		(*NSRequest_Mkdir)(nil),
		(*NSRequest_Rmdir)(nil),
		(*NSRequest_Touch)(nil),
		(*NSRequest_Unlink)(nil),
		(*NSRequest_Rm)(nil),
		(*NSRequest_Rename)(nil),
		(*NSRequest_Symlink)(nil),
		(*NSRequest_Version)(nil),
		(*NSRequest_Recycle)(nil),
		(*NSRequest_Xattr)(nil),
		(*NSRequest_Chown)(nil),
		(*NSRequest_Chmod)(nil),
		(*NSRequest_Acl)(nil),
		(*NSRequest_Token)(nil),
	}
}

func _NSRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*NSRequest)
	// command
	switch x := m.Command.(type) {
	case *NSRequest_Mkdir:
		b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Mkdir); err != nil {
			return err
		}
	case *NSRequest_Rmdir:
		b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rmdir); err != nil {
			return err
		}
	case *NSRequest_Touch:
		b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Touch); err != nil {
			return err
		}
	case *NSRequest_Unlink:
		b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Unlink); err != nil {
			return err
		}
	case *NSRequest_Rm:
		b.EncodeVarint(25<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rm); err != nil {
			return err
		}
	case *NSRequest_Rename:
		b.EncodeVarint(26<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rename); err != nil {
			return err
		}
	case *NSRequest_Symlink:
		b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Symlink); err != nil {
			return err
		}
	case *NSRequest_Version:
		b.EncodeVarint(28<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Version); err != nil {
			return err
		}
	case *NSRequest_Recycle:
		b.EncodeVarint(29<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Recycle); err != nil {
			return err
		}
	case *NSRequest_Xattr:
		b.EncodeVarint(30<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Xattr); err != nil {
			return err
		}
	case *NSRequest_Chown:
		b.EncodeVarint(31<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Chown); err != nil {
			return err
		}
	case *NSRequest_Chmod:
		b.EncodeVarint(32<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Chmod); err != nil {
			return err
		}
	case *NSRequest_Acl:
		b.EncodeVarint(33<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Acl); err != nil {
			return err
		}
	case *NSRequest_Token:
		b.EncodeVarint(34<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Token); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("NSRequest.Command has unexpected type %T", x)
	}
	return nil
}

func _NSRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*NSRequest)
	switch tag {
	case 21: // command.mkdir
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NSRequest_MkdirRequest)
		err := b.DecodeMessage(msg)
		m.Command = &NSRequest_Mkdir{msg}
		return true, err
	case 22: // command.rmdir
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NSRequest_RmdirRequest)
		err := b.DecodeMessage(msg)
		m.Command = &NSRequest_Rmdir{msg}
		return true, err
	case 23: // command.touch
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NSRequest_TouchRequest)
		err := b.DecodeMessage(msg)
		m.Command = &NSRequest_Touch{msg}
		return true, err
	case 24: // command.unlink
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NSRequest_UnlinkRequest)
		err := b.DecodeMessage(msg)
		m.Command = &NSRequest_Unlink{msg}
		return true, err
	case 25: // command.rm
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NSRequest_RmRequest)
		err := b.DecodeMessage(msg)
		m.Command = &NSRequest_Rm{msg}
		return true, err
	case 26: // command.rename
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NSRequest_RenameRequest)
		err := b.DecodeMessage(msg)
		m.Command = &NSRequest_Rename{msg}
		return true, err
	case 27: // command.symlink
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NSRequest_SymlinkRequest)
		err := b.DecodeMessage(msg)
		m.Command = &NSRequest_Symlink{msg}
		return true, err
	case 28: // command.version
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NSRequest_VersionRequest)
		err := b.DecodeMessage(msg)
		m.Command = &NSRequest_Version{msg}
		return true, err
	case 29: // command.recycle
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NSRequest_RecycleRequest)
		err := b.DecodeMessage(msg)
		m.Command = &NSRequest_Recycle{msg}
		return true, err
	case 30: // command.xattr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NSRequest_SetXAttrRequest)
		err := b.DecodeMessage(msg)
		m.Command = &NSRequest_Xattr{msg}
		return true, err
	case 31: // command.chown
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NSRequest_ChownRequest)
		err := b.DecodeMessage(msg)
		m.Command = &NSRequest_Chown{msg}
		return true, err
	case 32: // command.chmod
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NSRequest_ChmodRequest)
		err := b.DecodeMessage(msg)
		m.Command = &NSRequest_Chmod{msg}
		return true, err
	case 33: // command.acl
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NSRequest_AclRequest)
		err := b.DecodeMessage(msg)
		m.Command = &NSRequest_Acl{msg}
		return true, err
	case 34: // command.token
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NSRequest_TokenRequest)
		err := b.DecodeMessage(msg)
		m.Command = &NSRequest_Token{msg}
		return true, err
	default:
		return false, nil
	}
}

func _NSRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*NSRequest)
	// command
	switch x := m.Command.(type) {
	case *NSRequest_Mkdir:
		s := proto.Size(x.Mkdir)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NSRequest_Rmdir:
		s := proto.Size(x.Rmdir)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NSRequest_Touch:
		s := proto.Size(x.Touch)
		n += proto.SizeVarint(23<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NSRequest_Unlink:
		s := proto.Size(x.Unlink)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NSRequest_Rm:
		s := proto.Size(x.Rm)
		n += proto.SizeVarint(25<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NSRequest_Rename:
		s := proto.Size(x.Rename)
		n += proto.SizeVarint(26<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NSRequest_Symlink:
		s := proto.Size(x.Symlink)
		n += proto.SizeVarint(27<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NSRequest_Version:
		s := proto.Size(x.Version)
		n += proto.SizeVarint(28<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NSRequest_Recycle:
		s := proto.Size(x.Recycle)
		n += proto.SizeVarint(29<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NSRequest_Xattr:
		s := proto.Size(x.Xattr)
		n += proto.SizeVarint(30<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NSRequest_Chown:
		s := proto.Size(x.Chown)
		n += proto.SizeVarint(31<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NSRequest_Chmod:
		s := proto.Size(x.Chmod)
		n += proto.SizeVarint(32<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NSRequest_Acl:
		s := proto.Size(x.Acl)
		n += proto.SizeVarint(33<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NSRequest_Token:
		s := proto.Size(x.Token)
		n += proto.SizeVarint(34<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type NSRequest_MkdirRequest struct {
	Id        *MDId `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Recursive bool  `protobuf:"varint,2,opt,name=recursive" json:"recursive,omitempty"`
	Mode      int64 `protobuf:"varint,3,opt,name=mode" json:"mode,omitempty"`
}

func (m *NSRequest_MkdirRequest) Reset()                    { *m = NSRequest_MkdirRequest{} }
func (m *NSRequest_MkdirRequest) String() string            { return proto.CompactTextString(m) }
func (*NSRequest_MkdirRequest) ProtoMessage()               {}
func (*NSRequest_MkdirRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19, 0} }

func (m *NSRequest_MkdirRequest) GetId() *MDId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *NSRequest_MkdirRequest) GetRecursive() bool {
	if m != nil {
		return m.Recursive
	}
	return false
}

func (m *NSRequest_MkdirRequest) GetMode() int64 {
	if m != nil {
		return m.Mode
	}
	return 0
}

type NSRequest_RmdirRequest struct {
	Id *MDId `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *NSRequest_RmdirRequest) Reset()                    { *m = NSRequest_RmdirRequest{} }
func (m *NSRequest_RmdirRequest) String() string            { return proto.CompactTextString(m) }
func (*NSRequest_RmdirRequest) ProtoMessage()               {}
func (*NSRequest_RmdirRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19, 1} }

func (m *NSRequest_RmdirRequest) GetId() *MDId {
	if m != nil {
		return m.Id
	}
	return nil
}

type NSRequest_TouchRequest struct {
	Id *MDId `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *NSRequest_TouchRequest) Reset()                    { *m = NSRequest_TouchRequest{} }
func (m *NSRequest_TouchRequest) String() string            { return proto.CompactTextString(m) }
func (*NSRequest_TouchRequest) ProtoMessage()               {}
func (*NSRequest_TouchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19, 2} }

func (m *NSRequest_TouchRequest) GetId() *MDId {
	if m != nil {
		return m.Id
	}
	return nil
}

type NSRequest_UnlinkRequest struct {
	Id        *MDId `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Norecycle bool  `protobuf:"varint,3,opt,name=norecycle" json:"norecycle,omitempty"`
}

func (m *NSRequest_UnlinkRequest) Reset()                    { *m = NSRequest_UnlinkRequest{} }
func (m *NSRequest_UnlinkRequest) String() string            { return proto.CompactTextString(m) }
func (*NSRequest_UnlinkRequest) ProtoMessage()               {}
func (*NSRequest_UnlinkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19, 3} }

func (m *NSRequest_UnlinkRequest) GetId() *MDId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *NSRequest_UnlinkRequest) GetNorecycle() bool {
	if m != nil {
		return m.Norecycle
	}
	return false
}

type NSRequest_RmRequest struct {
	Id        *MDId `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Recursive bool  `protobuf:"varint,2,opt,name=recursive" json:"recursive,omitempty"`
	Norecycle bool  `protobuf:"varint,3,opt,name=norecycle" json:"norecycle,omitempty"`
}

func (m *NSRequest_RmRequest) Reset()                    { *m = NSRequest_RmRequest{} }
func (m *NSRequest_RmRequest) String() string            { return proto.CompactTextString(m) }
func (*NSRequest_RmRequest) ProtoMessage()               {}
func (*NSRequest_RmRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19, 4} }

func (m *NSRequest_RmRequest) GetId() *MDId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *NSRequest_RmRequest) GetRecursive() bool {
	if m != nil {
		return m.Recursive
	}
	return false
}

func (m *NSRequest_RmRequest) GetNorecycle() bool {
	if m != nil {
		return m.Norecycle
	}
	return false
}

type NSRequest_RenameRequest struct {
	Id     *MDId  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Target []byte `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
}

func (m *NSRequest_RenameRequest) Reset()                    { *m = NSRequest_RenameRequest{} }
func (m *NSRequest_RenameRequest) String() string            { return proto.CompactTextString(m) }
func (*NSRequest_RenameRequest) ProtoMessage()               {}
func (*NSRequest_RenameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19, 5} }

func (m *NSRequest_RenameRequest) GetId() *MDId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *NSRequest_RenameRequest) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

type NSRequest_SymlinkRequest struct {
	Id     *MDId  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Target []byte `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
}

func (m *NSRequest_SymlinkRequest) Reset()                    { *m = NSRequest_SymlinkRequest{} }
func (m *NSRequest_SymlinkRequest) String() string            { return proto.CompactTextString(m) }
func (*NSRequest_SymlinkRequest) ProtoMessage()               {}
func (*NSRequest_SymlinkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19, 6} }

func (m *NSRequest_SymlinkRequest) GetId() *MDId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *NSRequest_SymlinkRequest) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

type NSRequest_VersionRequest struct {
	Id         *MDId                                `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Cmd        NSRequest_VersionRequest_VERSION_CMD `protobuf:"varint,2,opt,name=cmd,enum=eos.rpc.NSRequest_VersionRequest_VERSION_CMD" json:"cmd,omitempty"`
	Maxversion int32                                `protobuf:"varint,3,opt,name=maxversion" json:"maxversion,omitempty"`
}

func (m *NSRequest_VersionRequest) Reset()                    { *m = NSRequest_VersionRequest{} }
func (m *NSRequest_VersionRequest) String() string            { return proto.CompactTextString(m) }
func (*NSRequest_VersionRequest) ProtoMessage()               {}
func (*NSRequest_VersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19, 7} }

func (m *NSRequest_VersionRequest) GetId() *MDId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *NSRequest_VersionRequest) GetCmd() NSRequest_VersionRequest_VERSION_CMD {
	if m != nil {
		return m.Cmd
	}
	return NSRequest_VersionRequest_CREATE
}

func (m *NSRequest_VersionRequest) GetMaxversion() int32 {
	if m != nil {
		return m.Maxversion
	}
	return 0
}

type NSRequest_RecycleRequest struct {
	Id *MDId `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *NSRequest_RecycleRequest) Reset()                    { *m = NSRequest_RecycleRequest{} }
func (m *NSRequest_RecycleRequest) String() string            { return proto.CompactTextString(m) }
func (*NSRequest_RecycleRequest) ProtoMessage()               {}
func (*NSRequest_RecycleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19, 8} }

func (m *NSRequest_RecycleRequest) GetId() *MDId {
	if m != nil {
		return m.Id
	}
	return nil
}

type NSRequest_SetXAttrRequest struct {
	Id           *MDId             `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Xattrs       map[string][]byte `protobuf:"bytes,2,rep,name=xattrs" json:"xattrs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Recursive    bool              `protobuf:"varint,3,opt,name=recursive" json:"recursive,omitempty"`
	Keystodelete []string          `protobuf:"bytes,4,rep,name=keystodelete" json:"keystodelete,omitempty"`
}

func (m *NSRequest_SetXAttrRequest) Reset()                    { *m = NSRequest_SetXAttrRequest{} }
func (m *NSRequest_SetXAttrRequest) String() string            { return proto.CompactTextString(m) }
func (*NSRequest_SetXAttrRequest) ProtoMessage()               {}
func (*NSRequest_SetXAttrRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19, 9} }

func (m *NSRequest_SetXAttrRequest) GetId() *MDId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *NSRequest_SetXAttrRequest) GetXattrs() map[string][]byte {
	if m != nil {
		return m.Xattrs
	}
	return nil
}

func (m *NSRequest_SetXAttrRequest) GetRecursive() bool {
	if m != nil {
		return m.Recursive
	}
	return false
}

func (m *NSRequest_SetXAttrRequest) GetKeystodelete() []string {
	if m != nil {
		return m.Keystodelete
	}
	return nil
}

type NSRequest_ChownRequest struct {
	Id    *MDId   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Owner *RoleId `protobuf:"bytes,2,opt,name=owner" json:"owner,omitempty"`
}

func (m *NSRequest_ChownRequest) Reset()                    { *m = NSRequest_ChownRequest{} }
func (m *NSRequest_ChownRequest) String() string            { return proto.CompactTextString(m) }
func (*NSRequest_ChownRequest) ProtoMessage()               {}
func (*NSRequest_ChownRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19, 10} }

func (m *NSRequest_ChownRequest) GetId() *MDId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *NSRequest_ChownRequest) GetOwner() *RoleId {
	if m != nil {
		return m.Owner
	}
	return nil
}

type NSRequest_ChmodRequest struct {
	Id   *MDId `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Mode int64 `protobuf:"varint,2,opt,name=mode" json:"mode,omitempty"`
}

func (m *NSRequest_ChmodRequest) Reset()                    { *m = NSRequest_ChmodRequest{} }
func (m *NSRequest_ChmodRequest) String() string            { return proto.CompactTextString(m) }
func (*NSRequest_ChmodRequest) ProtoMessage()               {}
func (*NSRequest_ChmodRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19, 11} }

func (m *NSRequest_ChmodRequest) GetId() *MDId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *NSRequest_ChmodRequest) GetMode() int64 {
	if m != nil {
		return m.Mode
	}
	return 0
}

type NSRequest_AclRequest struct {
	Id        *MDId                            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Cmd       NSRequest_AclRequest_ACL_COMMAND `protobuf:"varint,2,opt,name=cmd,enum=eos.rpc.NSRequest_AclRequest_ACL_COMMAND" json:"cmd,omitempty"`
	Recursive bool                             `protobuf:"varint,3,opt,name=recursive" json:"recursive,omitempty"`
	Type      NSRequest_AclRequest_ACL_TYPE    `protobuf:"varint,4,opt,name=type,enum=eos.rpc.NSRequest_AclRequest_ACL_TYPE" json:"type,omitempty"`
	Rule      string                           `protobuf:"bytes,5,opt,name=rule" json:"rule,omitempty"`
}

func (m *NSRequest_AclRequest) Reset()                    { *m = NSRequest_AclRequest{} }
func (m *NSRequest_AclRequest) String() string            { return proto.CompactTextString(m) }
func (*NSRequest_AclRequest) ProtoMessage()               {}
func (*NSRequest_AclRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19, 12} }

func (m *NSRequest_AclRequest) GetId() *MDId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *NSRequest_AclRequest) GetCmd() NSRequest_AclRequest_ACL_COMMAND {
	if m != nil {
		return m.Cmd
	}
	return NSRequest_AclRequest_NONE
}

func (m *NSRequest_AclRequest) GetRecursive() bool {
	if m != nil {
		return m.Recursive
	}
	return false
}

func (m *NSRequest_AclRequest) GetType() NSRequest_AclRequest_ACL_TYPE {
	if m != nil {
		return m.Type
	}
	return NSRequest_AclRequest_USER_ACL
}

func (m *NSRequest_AclRequest) GetRule() string {
	if m != nil {
		return m.Rule
	}
	return ""
}

type NSRequest_TokenRequest struct {
	Token *ShareToken `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *NSRequest_TokenRequest) Reset()                    { *m = NSRequest_TokenRequest{} }
func (m *NSRequest_TokenRequest) String() string            { return proto.CompactTextString(m) }
func (*NSRequest_TokenRequest) ProtoMessage()               {}
func (*NSRequest_TokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19, 13} }

func (m *NSRequest_TokenRequest) GetToken() *ShareToken {
	if m != nil {
		return m.Token
	}
	return nil
}

type NSResponse struct {
	Error   *NSResponse_ErrorResponse   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Version *NSResponse_VersionResponse `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	Recycle *NSResponse_RecycleResponse `protobuf:"bytes,3,opt,name=recycle" json:"recycle,omitempty"`
	Acl     *NSResponse_AclResponse     `protobuf:"bytes,4,opt,name=acl" json:"acl,omitempty"`
}

func (m *NSResponse) Reset()                    { *m = NSResponse{} }
func (m *NSResponse) String() string            { return proto.CompactTextString(m) }
func (*NSResponse) ProtoMessage()               {}
func (*NSResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *NSResponse) GetError() *NSResponse_ErrorResponse {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *NSResponse) GetVersion() *NSResponse_VersionResponse {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *NSResponse) GetRecycle() *NSResponse_RecycleResponse {
	if m != nil {
		return m.Recycle
	}
	return nil
}

func (m *NSResponse) GetAcl() *NSResponse_AclResponse {
	if m != nil {
		return m.Acl
	}
	return nil
}

type NSResponse_ErrorResponse struct {
	Code int64  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *NSResponse_ErrorResponse) Reset()                    { *m = NSResponse_ErrorResponse{} }
func (m *NSResponse_ErrorResponse) String() string            { return proto.CompactTextString(m) }
func (*NSResponse_ErrorResponse) ProtoMessage()               {}
func (*NSResponse_ErrorResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20, 0} }

func (m *NSResponse_ErrorResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *NSResponse_ErrorResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type NSResponse_VersionResponse struct {
	Code     int64                                     `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Msg      string                                    `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	Versions []*NSResponse_VersionResponse_VersionInfo `protobuf:"bytes,3,rep,name=versions" json:"versions,omitempty"`
}

func (m *NSResponse_VersionResponse) Reset()                    { *m = NSResponse_VersionResponse{} }
func (m *NSResponse_VersionResponse) String() string            { return proto.CompactTextString(m) }
func (*NSResponse_VersionResponse) ProtoMessage()               {}
func (*NSResponse_VersionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20, 1} }

func (m *NSResponse_VersionResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *NSResponse_VersionResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *NSResponse_VersionResponse) GetVersions() []*NSResponse_VersionResponse_VersionInfo {
	if m != nil {
		return m.Versions
	}
	return nil
}

type NSResponse_VersionResponse_VersionInfo struct {
	Id    *MDId `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Mtime *Time `protobuf:"bytes,2,opt,name=mtime" json:"mtime,omitempty"`
}

func (m *NSResponse_VersionResponse_VersionInfo) Reset() {
	*m = NSResponse_VersionResponse_VersionInfo{}
}
func (m *NSResponse_VersionResponse_VersionInfo) String() string { return proto.CompactTextString(m) }
func (*NSResponse_VersionResponse_VersionInfo) ProtoMessage()    {}
func (*NSResponse_VersionResponse_VersionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{20, 1, 0}
}

func (m *NSResponse_VersionResponse_VersionInfo) GetId() *MDId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *NSResponse_VersionResponse_VersionInfo) GetMtime() *Time {
	if m != nil {
		return m.Mtime
	}
	return nil
}

type NSResponse_RecycleResponse struct {
	Code int64  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *NSResponse_RecycleResponse) Reset()                    { *m = NSResponse_RecycleResponse{} }
func (m *NSResponse_RecycleResponse) String() string            { return proto.CompactTextString(m) }
func (*NSResponse_RecycleResponse) ProtoMessage()               {}
func (*NSResponse_RecycleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20, 2} }

func (m *NSResponse_RecycleResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *NSResponse_RecycleResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type NSResponse_AclResponse struct {
	Code int64  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	Rule string `protobuf:"bytes,3,opt,name=rule" json:"rule,omitempty"`
}

func (m *NSResponse_AclResponse) Reset()                    { *m = NSResponse_AclResponse{} }
func (m *NSResponse_AclResponse) String() string            { return proto.CompactTextString(m) }
func (*NSResponse_AclResponse) ProtoMessage()               {}
func (*NSResponse_AclResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20, 3} }

func (m *NSResponse_AclResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *NSResponse_AclResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *NSResponse_AclResponse) GetRule() string {
	if m != nil {
		return m.Rule
	}
	return ""
}

type NsStatRequest struct {
	Authkey string `protobuf:"bytes,1,opt,name=authkey" json:"authkey,omitempty"`
}

func (m *NsStatRequest) Reset()                    { *m = NsStatRequest{} }
func (m *NsStatRequest) String() string            { return proto.CompactTextString(m) }
func (*NsStatRequest) ProtoMessage()               {}
func (*NsStatRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *NsStatRequest) GetAuthkey() string {
	if m != nil {
		return m.Authkey
	}
	return ""
}

type NsStatResponse struct {
	Code        int64  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Emsg        string `protobuf:"bytes,2,opt,name=emsg" json:"emsg,omitempty"`
	State       string `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
	Nfiles      uint64 `protobuf:"varint,4,opt,name=nfiles" json:"nfiles,omitempty"`
	Ncontainers uint64 `protobuf:"varint,5,opt,name=ncontainers" json:"ncontainers,omitempty"`
	BootTime    uint64 `protobuf:"varint,6,opt,name=boot_time,json=bootTime" json:"boot_time,omitempty"`
	CurrentFid  uint64 `protobuf:"varint,7,opt,name=current_fid,json=currentFid" json:"current_fid,omitempty"`
	CurrentCid  uint64 `protobuf:"varint,8,opt,name=current_cid,json=currentCid" json:"current_cid,omitempty"`
	MemVirtual  uint64 `protobuf:"varint,9,opt,name=mem_virtual,json=memVirtual" json:"mem_virtual,omitempty"`
	MemResident uint64 `protobuf:"varint,10,opt,name=mem_resident,json=memResident" json:"mem_resident,omitempty"`
	MemShare    uint64 `protobuf:"varint,11,opt,name=mem_share,json=memShare" json:"mem_share,omitempty"`
	MemGrowth   uint64 `protobuf:"varint,12,opt,name=mem_growth,json=memGrowth" json:"mem_growth,omitempty"`
	Threads     uint64 `protobuf:"varint,13,opt,name=threads" json:"threads,omitempty"`
	Fds         uint64 `protobuf:"varint,14,opt,name=fds" json:"fds,omitempty"`
	Uptime      uint64 `protobuf:"varint,15,opt,name=uptime" json:"uptime,omitempty"`
}

func (m *NsStatResponse) Reset()                    { *m = NsStatResponse{} }
func (m *NsStatResponse) String() string            { return proto.CompactTextString(m) }
func (*NsStatResponse) ProtoMessage()               {}
func (*NsStatResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *NsStatResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *NsStatResponse) GetEmsg() string {
	if m != nil {
		return m.Emsg
	}
	return ""
}

func (m *NsStatResponse) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *NsStatResponse) GetNfiles() uint64 {
	if m != nil {
		return m.Nfiles
	}
	return 0
}

func (m *NsStatResponse) GetNcontainers() uint64 {
	if m != nil {
		return m.Ncontainers
	}
	return 0
}

func (m *NsStatResponse) GetBootTime() uint64 {
	if m != nil {
		return m.BootTime
	}
	return 0
}

func (m *NsStatResponse) GetCurrentFid() uint64 {
	if m != nil {
		return m.CurrentFid
	}
	return 0
}

func (m *NsStatResponse) GetCurrentCid() uint64 {
	if m != nil {
		return m.CurrentCid
	}
	return 0
}

func (m *NsStatResponse) GetMemVirtual() uint64 {
	if m != nil {
		return m.MemVirtual
	}
	return 0
}

func (m *NsStatResponse) GetMemResident() uint64 {
	if m != nil {
		return m.MemResident
	}
	return 0
}

func (m *NsStatResponse) GetMemShare() uint64 {
	if m != nil {
		return m.MemShare
	}
	return 0
}

func (m *NsStatResponse) GetMemGrowth() uint64 {
	if m != nil {
		return m.MemGrowth
	}
	return 0
}

func (m *NsStatResponse) GetThreads() uint64 {
	if m != nil {
		return m.Threads
	}
	return 0
}

func (m *NsStatResponse) GetFds() uint64 {
	if m != nil {
		return m.Fds
	}
	return 0
}

func (m *NsStatResponse) GetUptime() uint64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

type ManilaRequest struct {
	RequestType   MANILA_REQUEST_TYPE `protobuf:"varint,1,opt,name=request_type,json=requestType,enum=eos.rpc.MANILA_REQUEST_TYPE" json:"request_type,omitempty"`
	AuthKey       string              `protobuf:"bytes,2,opt,name=auth_key,json=authKey" json:"auth_key,omitempty"`
	Protocol      string              `protobuf:"bytes,3,opt,name=protocol" json:"protocol,omitempty"`
	ShareName     string              `protobuf:"bytes,4,opt,name=share_name,json=shareName" json:"share_name,omitempty"`
	Description   string              `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	ShareId       string              `protobuf:"bytes,6,opt,name=share_id,json=shareId" json:"share_id,omitempty"`
	ShareGroupId  string              `protobuf:"bytes,7,opt,name=share_group_id,json=shareGroupId" json:"share_group_id,omitempty"`
	Quota         int32               `protobuf:"varint,8,opt,name=quota" json:"quota,omitempty"`
	Creator       string              `protobuf:"bytes,9,opt,name=creator" json:"creator,omitempty"`
	Egroup        string              `protobuf:"bytes,10,opt,name=egroup" json:"egroup,omitempty"`
	AdminEgroup   string              `protobuf:"bytes,11,opt,name=admin_egroup,json=adminEgroup" json:"admin_egroup,omitempty"`
	ShareHost     string              `protobuf:"bytes,12,opt,name=share_host,json=shareHost" json:"share_host,omitempty"`
	ShareLocation string              `protobuf:"bytes,13,opt,name=share_location,json=shareLocation" json:"share_location,omitempty"`
}

func (m *ManilaRequest) Reset()                    { *m = ManilaRequest{} }
func (m *ManilaRequest) String() string            { return proto.CompactTextString(m) }
func (*ManilaRequest) ProtoMessage()               {}
func (*ManilaRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *ManilaRequest) GetRequestType() MANILA_REQUEST_TYPE {
	if m != nil {
		return m.RequestType
	}
	return MANILA_REQUEST_TYPE_CREATE_SHARE
}

func (m *ManilaRequest) GetAuthKey() string {
	if m != nil {
		return m.AuthKey
	}
	return ""
}

func (m *ManilaRequest) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *ManilaRequest) GetShareName() string {
	if m != nil {
		return m.ShareName
	}
	return ""
}

func (m *ManilaRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ManilaRequest) GetShareId() string {
	if m != nil {
		return m.ShareId
	}
	return ""
}

func (m *ManilaRequest) GetShareGroupId() string {
	if m != nil {
		return m.ShareGroupId
	}
	return ""
}

func (m *ManilaRequest) GetQuota() int32 {
	if m != nil {
		return m.Quota
	}
	return 0
}

func (m *ManilaRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ManilaRequest) GetEgroup() string {
	if m != nil {
		return m.Egroup
	}
	return ""
}

func (m *ManilaRequest) GetAdminEgroup() string {
	if m != nil {
		return m.AdminEgroup
	}
	return ""
}

func (m *ManilaRequest) GetShareHost() string {
	if m != nil {
		return m.ShareHost
	}
	return ""
}

func (m *ManilaRequest) GetShareLocation() string {
	if m != nil {
		return m.ShareLocation
	}
	return ""
}

type ManilaResponse struct {
	Msg           string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
	Code          int32  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	TotalUsed     int64  `protobuf:"varint,3,opt,name=total_used,json=totalUsed" json:"total_used,omitempty"`
	TotalCapacity int64  `protobuf:"varint,4,opt,name=total_capacity,json=totalCapacity" json:"total_capacity,omitempty"`
	NewShareQuota int64  `protobuf:"varint,5,opt,name=new_share_quota,json=newShareQuota" json:"new_share_quota,omitempty"`
	NewSharePath  string `protobuf:"bytes,6,opt,name=new_share_path,json=newSharePath" json:"new_share_path,omitempty"`
}

func (m *ManilaResponse) Reset()                    { *m = ManilaResponse{} }
func (m *ManilaResponse) String() string            { return proto.CompactTextString(m) }
func (*ManilaResponse) ProtoMessage()               {}
func (*ManilaResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *ManilaResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *ManilaResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ManilaResponse) GetTotalUsed() int64 {
	if m != nil {
		return m.TotalUsed
	}
	return 0
}

func (m *ManilaResponse) GetTotalCapacity() int64 {
	if m != nil {
		return m.TotalCapacity
	}
	return 0
}

func (m *ManilaResponse) GetNewShareQuota() int64 {
	if m != nil {
		return m.NewShareQuota
	}
	return 0
}

func (m *ManilaResponse) GetNewSharePath() string {
	if m != nil {
		return m.NewSharePath
	}
	return ""
}

func init() {
	proto.RegisterType((*PingRequest)(nil), "eos.rpc.PingRequest")
	proto.RegisterType((*PingReply)(nil), "eos.rpc.PingReply")
	proto.RegisterType((*ContainerInsertRequest)(nil), "eos.rpc.ContainerInsertRequest")
	proto.RegisterType((*FileInsertRequest)(nil), "eos.rpc.FileInsertRequest")
	proto.RegisterType((*InsertReply)(nil), "eos.rpc.InsertReply")
	proto.RegisterType((*Time)(nil), "eos.rpc.Time")
	proto.RegisterType((*Checksum)(nil), "eos.rpc.Checksum")
	proto.RegisterType((*FileMdProto)(nil), "eos.rpc.FileMdProto")
	proto.RegisterType((*ContainerMdProto)(nil), "eos.rpc.ContainerMdProto")
	proto.RegisterType((*RoleId)(nil), "eos.rpc.RoleId")
	proto.RegisterType((*MDId)(nil), "eos.rpc.MDId")
	proto.RegisterType((*Limit)(nil), "eos.rpc.Limit")
	proto.RegisterType((*MDSelection)(nil), "eos.rpc.MDSelection")
	proto.RegisterType((*MDRequest)(nil), "eos.rpc.MDRequest")
	proto.RegisterType((*MDResponse)(nil), "eos.rpc.MDResponse")
	proto.RegisterType((*FindRequest)(nil), "eos.rpc.FindRequest")
	proto.RegisterType((*ShareAuth)(nil), "eos.rpc.ShareAuth")
	proto.RegisterType((*ShareProto)(nil), "eos.rpc.ShareProto")
	proto.RegisterType((*ShareToken)(nil), "eos.rpc.ShareToken")
	proto.RegisterType((*NSRequest)(nil), "eos.rpc.NSRequest")
	proto.RegisterType((*NSRequest_MkdirRequest)(nil), "eos.rpc.NSRequest.MkdirRequest")
	proto.RegisterType((*NSRequest_RmdirRequest)(nil), "eos.rpc.NSRequest.RmdirRequest")
	proto.RegisterType((*NSRequest_TouchRequest)(nil), "eos.rpc.NSRequest.TouchRequest")
	proto.RegisterType((*NSRequest_UnlinkRequest)(nil), "eos.rpc.NSRequest.UnlinkRequest")
	proto.RegisterType((*NSRequest_RmRequest)(nil), "eos.rpc.NSRequest.RmRequest")
	proto.RegisterType((*NSRequest_RenameRequest)(nil), "eos.rpc.NSRequest.RenameRequest")
	proto.RegisterType((*NSRequest_SymlinkRequest)(nil), "eos.rpc.NSRequest.SymlinkRequest")
	proto.RegisterType((*NSRequest_VersionRequest)(nil), "eos.rpc.NSRequest.VersionRequest")
	proto.RegisterType((*NSRequest_RecycleRequest)(nil), "eos.rpc.NSRequest.RecycleRequest")
	proto.RegisterType((*NSRequest_SetXAttrRequest)(nil), "eos.rpc.NSRequest.SetXAttrRequest")
	proto.RegisterType((*NSRequest_ChownRequest)(nil), "eos.rpc.NSRequest.ChownRequest")
	proto.RegisterType((*NSRequest_ChmodRequest)(nil), "eos.rpc.NSRequest.ChmodRequest")
	proto.RegisterType((*NSRequest_AclRequest)(nil), "eos.rpc.NSRequest.AclRequest")
	proto.RegisterType((*NSRequest_TokenRequest)(nil), "eos.rpc.NSRequest.TokenRequest")
	proto.RegisterType((*NSResponse)(nil), "eos.rpc.NSResponse")
	proto.RegisterType((*NSResponse_ErrorResponse)(nil), "eos.rpc.NSResponse.ErrorResponse")
	proto.RegisterType((*NSResponse_VersionResponse)(nil), "eos.rpc.NSResponse.VersionResponse")
	proto.RegisterType((*NSResponse_VersionResponse_VersionInfo)(nil), "eos.rpc.NSResponse.VersionResponse.VersionInfo")
	proto.RegisterType((*NSResponse_RecycleResponse)(nil), "eos.rpc.NSResponse.RecycleResponse")
	proto.RegisterType((*NSResponse_AclResponse)(nil), "eos.rpc.NSResponse.AclResponse")
	proto.RegisterType((*NsStatRequest)(nil), "eos.rpc.NsStatRequest")
	proto.RegisterType((*NsStatResponse)(nil), "eos.rpc.NsStatResponse")
	proto.RegisterType((*ManilaRequest)(nil), "eos.rpc.ManilaRequest")
	proto.RegisterType((*ManilaResponse)(nil), "eos.rpc.ManilaResponse")
	proto.RegisterEnum("eos.rpc.TYPE", TYPE_name, TYPE_value)
	proto.RegisterEnum("eos.rpc.MANILA_REQUEST_TYPE", MANILA_REQUEST_TYPE_name, MANILA_REQUEST_TYPE_value)
	proto.RegisterEnum("eos.rpc.NSRequest_VersionRequest_VERSION_CMD", NSRequest_VersionRequest_VERSION_CMD_name, NSRequest_VersionRequest_VERSION_CMD_value)
	proto.RegisterEnum("eos.rpc.NSRequest_AclRequest_ACL_COMMAND", NSRequest_AclRequest_ACL_COMMAND_name, NSRequest_AclRequest_ACL_COMMAND_value)
	proto.RegisterEnum("eos.rpc.NSRequest_AclRequest_ACL_TYPE", NSRequest_AclRequest_ACL_TYPE_name, NSRequest_AclRequest_ACL_TYPE_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Eos service

type EosClient interface {
	// Replies to a ping
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	// Replies to MD requests with a stream
	MD(ctx context.Context, in *MDRequest, opts ...grpc.CallOption) (Eos_MDClient, error)
	// Replies to Find requests with a stream
	Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (Eos_FindClient, error)
	// Replies to a NsStat operation
	NsStat(ctx context.Context, in *NsStatRequest, opts ...grpc.CallOption) (*NsStatResponse, error)
	// Replies to an insert
	ContainerInsert(ctx context.Context, in *ContainerInsertRequest, opts ...grpc.CallOption) (*InsertReply, error)
	FileInsert(ctx context.Context, in *FileInsertRequest, opts ...grpc.CallOption) (*InsertReply, error)
	// Replies to a NsRequest operation
	Exec(ctx context.Context, in *NSRequest, opts ...grpc.CallOption) (*NSResponse, error)
	// Manila Driver
	ManilaServerRequest(ctx context.Context, in *ManilaRequest, opts ...grpc.CallOption) (*ManilaResponse, error)
}

type eosClient struct {
	cc *grpc.ClientConn
}

func NewEosClient(cc *grpc.ClientConn) EosClient {
	return &eosClient{cc}
}

func (c *eosClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := grpc.Invoke(ctx, "/eos.rpc.Eos/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eosClient) MD(ctx context.Context, in *MDRequest, opts ...grpc.CallOption) (Eos_MDClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Eos_serviceDesc.Streams[0], c.cc, "/eos.rpc.Eos/MD", opts...)
	if err != nil {
		return nil, err
	}
	x := &eosMDClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Eos_MDClient interface {
	Recv() (*MDResponse, error)
	grpc.ClientStream
}

type eosMDClient struct {
	grpc.ClientStream
}

func (x *eosMDClient) Recv() (*MDResponse, error) {
	m := new(MDResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eosClient) Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (Eos_FindClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Eos_serviceDesc.Streams[1], c.cc, "/eos.rpc.Eos/Find", opts...)
	if err != nil {
		return nil, err
	}
	x := &eosFindClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Eos_FindClient interface {
	Recv() (*MDResponse, error)
	grpc.ClientStream
}

type eosFindClient struct {
	grpc.ClientStream
}

func (x *eosFindClient) Recv() (*MDResponse, error) {
	m := new(MDResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eosClient) NsStat(ctx context.Context, in *NsStatRequest, opts ...grpc.CallOption) (*NsStatResponse, error) {
	out := new(NsStatResponse)
	err := grpc.Invoke(ctx, "/eos.rpc.Eos/NsStat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eosClient) ContainerInsert(ctx context.Context, in *ContainerInsertRequest, opts ...grpc.CallOption) (*InsertReply, error) {
	out := new(InsertReply)
	err := grpc.Invoke(ctx, "/eos.rpc.Eos/ContainerInsert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eosClient) FileInsert(ctx context.Context, in *FileInsertRequest, opts ...grpc.CallOption) (*InsertReply, error) {
	out := new(InsertReply)
	err := grpc.Invoke(ctx, "/eos.rpc.Eos/FileInsert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eosClient) Exec(ctx context.Context, in *NSRequest, opts ...grpc.CallOption) (*NSResponse, error) {
	out := new(NSResponse)
	err := grpc.Invoke(ctx, "/eos.rpc.Eos/Exec", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eosClient) ManilaServerRequest(ctx context.Context, in *ManilaRequest, opts ...grpc.CallOption) (*ManilaResponse, error) {
	out := new(ManilaResponse)
	err := grpc.Invoke(ctx, "/eos.rpc.Eos/ManilaServerRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Eos service

type EosServer interface {
	// Replies to a ping
	Ping(context.Context, *PingRequest) (*PingReply, error)
	// Replies to MD requests with a stream
	MD(*MDRequest, Eos_MDServer) error
	// Replies to Find requests with a stream
	Find(*FindRequest, Eos_FindServer) error
	// Replies to a NsStat operation
	NsStat(context.Context, *NsStatRequest) (*NsStatResponse, error)
	// Replies to an insert
	ContainerInsert(context.Context, *ContainerInsertRequest) (*InsertReply, error)
	FileInsert(context.Context, *FileInsertRequest) (*InsertReply, error)
	// Replies to a NsRequest operation
	Exec(context.Context, *NSRequest) (*NSResponse, error)
	// Manila Driver
	ManilaServerRequest(context.Context, *ManilaRequest) (*ManilaResponse, error)
}

func RegisterEosServer(s *grpc.Server, srv EosServer) {
	s.RegisterService(&_Eos_serviceDesc, srv)
}

func _Eos_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EosServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.rpc.Eos/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EosServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eos_MD_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MDRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EosServer).MD(m, &eosMDServer{stream})
}

type Eos_MDServer interface {
	Send(*MDResponse) error
	grpc.ServerStream
}

type eosMDServer struct {
	grpc.ServerStream
}

func (x *eosMDServer) Send(m *MDResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Eos_Find_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EosServer).Find(m, &eosFindServer{stream})
}

type Eos_FindServer interface {
	Send(*MDResponse) error
	grpc.ServerStream
}

type eosFindServer struct {
	grpc.ServerStream
}

func (x *eosFindServer) Send(m *MDResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Eos_NsStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NsStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EosServer).NsStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.rpc.Eos/NsStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EosServer).NsStat(ctx, req.(*NsStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eos_ContainerInsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerInsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EosServer).ContainerInsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.rpc.Eos/ContainerInsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EosServer).ContainerInsert(ctx, req.(*ContainerInsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eos_FileInsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EosServer).FileInsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.rpc.Eos/FileInsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EosServer).FileInsert(ctx, req.(*FileInsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eos_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EosServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.rpc.Eos/Exec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EosServer).Exec(ctx, req.(*NSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eos_ManilaServerRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManilaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EosServer).ManilaServerRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.rpc.Eos/ManilaServerRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EosServer).ManilaServerRequest(ctx, req.(*ManilaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Eos_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eos.rpc.Eos",
	HandlerType: (*EosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Eos_Ping_Handler,
		},
		{
			MethodName: "NsStat",
			Handler:    _Eos_NsStat_Handler,
		},
		{
			MethodName: "ContainerInsert",
			Handler:    _Eos_ContainerInsert_Handler,
		},
		{
			MethodName: "FileInsert",
			Handler:    _Eos_FileInsert_Handler,
		},
		{
			MethodName: "Exec",
			Handler:    _Eos_Exec_Handler,
		},
		{
			MethodName: "ManilaServerRequest",
			Handler:    _Eos_ManilaServerRequest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MD",
			Handler:       _Eos_MD_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Find",
			Handler:       _Eos_Find_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "eos_grpc.proto",
}

func init() { proto.RegisterFile("eos_grpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2962 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x5a, 0xcd, 0x77, 0xdb, 0xc6,
	0x11, 0x17, 0x08, 0x90, 0x22, 0x86, 0x1f, 0xa2, 0xd7, 0xae, 0x83, 0xd0, 0x76, 0x2c, 0xc3, 0x76,
	0x2a, 0xbb, 0xb1, 0xd2, 0xb8, 0xcd, 0x73, 0xe2, 0x3c, 0xbf, 0x94, 0x91, 0x28, 0x99, 0x8d, 0x44,
	0x2b, 0x4b, 0x39, 0xcf, 0xee, 0x85, 0x0f, 0x01, 0x56, 0x24, 0x9e, 0x08, 0x80, 0x01, 0x40, 0x5b,
	0xca, 0xb9, 0x97, 0xe4, 0xdc, 0x6b, 0x2f, 0x3d, 0xf4, 0xd2, 0xfe, 0x05, 0xed, 0x25, 0xe7, 0xfe,
	0x03, 0xbd, 0xf5, 0x1f, 0xe8, 0xb5, 0xbd, 0xf7, 0xed, 0xec, 0xe2, 0x4b, 0x26, 0x45, 0xa5, 0xc9,
	0x6d, 0x67, 0xf6, 0x37, 0xfb, 0x31, 0x3b, 0x1f, 0xbb, 0x03, 0x40, 0x93, 0x05, 0xd1, 0x70, 0x14,
	0x4e, 0xed, 0xcd, 0x69, 0x18, 0xc4, 0x01, 0x59, 0x65, 0x41, 0xb4, 0x19, 0x4e, 0x6d, 0xb3, 0x03,
	0xb5, 0x03, 0xd7, 0x1f, 0x51, 0xf6, 0xf5, 0x8c, 0x45, 0x31, 0x31, 0x60, 0xd5, 0x9a, 0xc5, 0xe3,
	0x63, 0x76, 0x6a, 0x28, 0xeb, 0xca, 0x86, 0x4e, 0x13, 0x92, 0xf7, 0x78, 0x2c, 0x8a, 0xac, 0x11,
	0x33, 0x4a, 0xeb, 0xca, 0x46, 0x9d, 0x26, 0xa4, 0x79, 0x17, 0x74, 0x31, 0xc4, 0x74, 0x52, 0x80,
	0x29, 0x45, 0xd8, 0x77, 0x0a, 0x5c, 0xdd, 0x0a, 0xfc, 0xd8, 0x72, 0x7d, 0x16, 0xf6, 0xfc, 0x88,
	0x85, 0x71, 0x32, 0xeb, 0x23, 0xd0, 0xed, 0xa4, 0xc7, 0x50, 0xd6, 0xd5, 0x8d, 0xda, 0xc3, 0xb7,
	0x37, 0xe5, 0x0a, 0x37, 0x53, 0x99, 0x7d, 0xe7, 0x80, 0xaf, 0x9d, 0x66, 0xd8, 0xfc, 0x72, 0x4b,
	0xc5, 0xe5, 0xde, 0x00, 0x70, 0xfd, 0x31, 0x0b, 0xdd, 0x78, 0xe8, 0x39, 0x86, 0xba, 0xae, 0x6c,
	0x54, 0xa9, 0x2e, 0x39, 0xfb, 0x8e, 0xf9, 0x12, 0x2e, 0xed, 0xb8, 0x13, 0x56, 0x5c, 0xc6, 0x7d,
	0x28, 0x1f, 0xb9, 0x13, 0x16, 0xc9, 0x25, 0x5c, 0x49, 0x97, 0xc0, 0xa1, 0xc9, 0xec, 0x02, 0xb2,
	0x78, 0x66, 0xf3, 0x13, 0xa8, 0x25, 0xc3, 0xbe, 0xa1, 0x10, 0x95, 0x03, 0x25, 0x49, 0x08, 0x68,
	0x21, 0x8b, 0x6d, 0xa3, 0xb4, 0xae, 0x6e, 0x34, 0x28, 0xb6, 0xcd, 0x07, 0xa0, 0x1d, 0xba, 0x1e,
	0x23, 0x2d, 0x50, 0x23, 0x66, 0xa3, 0x0a, 0x35, 0xca, 0x9b, 0xe4, 0x32, 0x94, 0xfd, 0x21, 0xe7,
	0x95, 0x90, 0xa7, 0xf9, 0x03, 0x66, 0x9b, 0xbf, 0x86, 0xea, 0xd6, 0x98, 0xd9, 0xc7, 0xd1, 0xcc,
	0x23, 0x57, 0xa0, 0xfc, 0xca, 0x9a, 0xcc, 0x12, 0xbd, 0x0b, 0x82, 0x4f, 0x12, 0x9f, 0x4e, 0x99,
	0x5c, 0x24, 0xb6, 0xcd, 0x3f, 0x6a, 0x50, 0xcb, 0x6d, 0x89, 0x34, 0xa1, 0xe4, 0x3a, 0x72, 0xae,
	0x92, 0xeb, 0x90, 0xb7, 0x60, 0x95, 0xab, 0x78, 0xe8, 0x3a, 0x72, 0xb2, 0x0a, 0x27, 0x7b, 0x0e,
	0x5f, 0xd5, 0xcc, 0x15, 0xda, 0xd4, 0x28, 0x6f, 0x72, 0xce, 0xc8, 0x75, 0x0c, 0x4d, 0x70, 0x46,
	0xae, 0xc3, 0x27, 0x8c, 0xdc, 0x6f, 0x98, 0x51, 0x16, 0xcb, 0xe4, 0x6d, 0x72, 0x0d, 0xf4, 0x89,
	0x75, 0x1a, 0xcc, 0x70, 0xc8, 0xca, 0xba, 0xb2, 0xd1, 0xa0, 0x55, 0xc1, 0xe8, 0x39, 0x7c, 0xdd,
	0x47, 0x13, 0x6b, 0x14, 0x19, 0xab, 0xd8, 0x21, 0x08, 0x3e, 0x8c, 0x6f, 0x79, 0xcc, 0xa8, 0xe2,
	0x66, 0xb0, 0x8d, 0xc3, 0xb8, 0xfe, 0xf1, 0x10, 0x3b, 0x74, 0xec, 0xa8, 0x72, 0x46, 0x9f, 0x77,
	0xde, 0x86, 0xb2, 0x1d, 0xbb, 0x1e, 0x33, 0x60, 0x5d, 0xd9, 0xa8, 0x3d, 0x6c, 0xa4, 0x87, 0xc7,
	0xf5, 0x49, 0x45, 0x1f, 0x07, 0x79, 0x08, 0xaa, 0xcd, 0x05, 0x61, 0x1f, 0x79, 0x00, 0x55, 0x5b,
	0x2a, 0xd5, 0xa8, 0x23, 0xee, 0x52, 0x66, 0x8c, 0xb2, 0x83, 0xa6, 0x10, 0x72, 0x1d, 0xf4, 0x49,
	0x60, 0x5b, 0xb1, 0x1b, 0xf8, 0x91, 0xd1, 0xc0, 0xb3, 0xcc, 0x18, 0xe4, 0x1e, 0xb4, 0x66, 0x3e,
	0xae, 0x3a, 0x03, 0x35, 0x11, 0xb4, 0x26, 0xf8, 0x7b, 0x29, 0xf4, 0x23, 0xa8, 0x9c, 0x58, 0x71,
	0x1c, 0x46, 0xc6, 0x1a, 0xda, 0xdf, 0xfa, 0x3c, 0xfb, 0xdb, 0x7c, 0x81, 0x90, 0xae, 0x1f, 0x87,
	0xa7, 0x54, 0xe2, 0xb9, 0xb2, 0xa6, 0x56, 0x3c, 0x36, 0x5a, 0x42, 0x59, 0xbc, 0xdd, 0xfe, 0x18,
	0x6a, 0x39, 0x28, 0x3f, 0xa8, 0xcc, 0xa9, 0x79, 0x33, 0xb3, 0x97, 0x52, 0xce, 0x5e, 0x1e, 0x97,
	0x3e, 0x52, 0xcc, 0xbf, 0xab, 0xd0, 0x3a, 0xeb, 0x75, 0x6f, 0x18, 0xc9, 0x35, 0xd0, 0xa7, 0x56,
	0xc8, 0xf2, 0x66, 0x52, 0x15, 0x8c, 0x0b, 0x1a, 0xca, 0x35, 0xd0, 0xe3, 0x90, 0xb1, 0x21, 0x5a,
	0x0b, 0x37, 0x0a, 0x95, 0x56, 0x39, 0x63, 0xc0, 0x2d, 0x86, 0x80, 0xe6, 0x05, 0x8e, 0xb0, 0xa2,
	0x06, 0xc5, 0xf6, 0x0f, 0x30, 0x94, 0xd4, 0x16, 0xf4, 0x8b, 0xd8, 0x02, 0x9c, 0x63, 0x0b, 0xb7,
	0xa1, 0x1c, 0x9d, 0x63, 0x30, 0xd8, 0x47, 0x9e, 0xa4, 0x07, 0x57, 0xc7, 0x83, 0xbb, 0xbb, 0x30,
	0x76, 0x9d, 0x7b, 0x7a, 0x8d, 0x9f, 0xe6, 0xf4, 0x8e, 0xa0, 0x42, 0x83, 0x09, 0xcb, 0x4e, 0x41,
	0x79, 0xe3, 0x14, 0x4a, 0xd9, 0x29, 0xb4, 0xa1, 0x3a, 0x8b, 0x58, 0x88, 0x2a, 0x54, 0x71, 0xf8,
	0x94, 0xe6, 0x96, 0x3d, 0x0a, 0x83, 0xd9, 0x14, 0x3b, 0x35, 0xec, 0xcc, 0x18, 0xe6, 0x10, 0xb4,
	0xfd, 0xed, 0x9e, 0x93, 0x2e, 0x5f, 0xc9, 0x96, 0x2f, 0x8d, 0x85, 0x4f, 0x53, 0x41, 0x63, 0x69,
	0x81, 0xea, 0xfa, 0x01, 0x4e, 0x50, 0xa1, 0xbc, 0x49, 0x6e, 0xc9, 0xb8, 0xc4, 0x87, 0x6d, 0xe6,
	0xf5, 0xfa, 0xf2, 0xa0, 0x2b, 0xc3, 0xd4, 0xa7, 0x50, 0xde, 0x73, 0x3d, 0x37, 0xe6, 0x33, 0x7c,
	0xc3, 0xc2, 0x00, 0x67, 0xa8, 0x52, 0x6c, 0xf3, 0x11, 0x3d, 0xd7, 0x4f, 0x76, 0xe2, 0xb9, 0x3e,
	0x72, 0xac, 0x93, 0xc4, 0xe6, 0x3c, 0xeb, 0xc4, 0xfc, 0x73, 0x05, 0x6a, 0xfb, 0xdb, 0x03, 0x36,
	0x61, 0x36, 0xf7, 0x30, 0x72, 0x15, 0x2a, 0x11, 0x12, 0x72, 0x24, 0x49, 0x91, 0x3b, 0x89, 0xb9,
	0x94, 0xf0, 0x90, 0x9b, 0xe9, 0x62, 0x70, 0xfa, 0xc4, 0x5e, 0xee, 0x24, 0xf6, 0xa2, 0xce, 0x47,
	0x79, 0x09, 0x4a, 0x18, 0x8c, 0x36, 0x1f, 0x25, 0x2c, 0xc6, 0xcc, 0x05, 0xc9, 0x37, 0x41, 0x22,
	0x68, 0xde, 0x07, 0x74, 0x87, 0xd4, 0x3d, 0xde, 0xc4, 0xa5, 0xfd, 0x1c, 0x6b, 0x8f, 0xdd, 0x89,
	0x13, 0x32, 0x1f, 0xbd, 0x63, 0x0e, 0x36, 0xe9, 0x27, 0xef, 0xe5, 0xe3, 0x55, 0x75, 0x2e, 0x38,
	0x17, 0xbf, 0x9e, 0x00, 0x11, 0x71, 0x8a, 0x39, 0xb9, 0x08, 0xa6, 0xcf, 0x15, 0xbb, 0x94, 0x20,
	0xb3, 0x98, 0xd6, 0x06, 0x19, 0xe8, 0x5d, 0x07, 0xfd, 0x4c, 0xa3, 0x29, 0x9d, 0xf9, 0x73, 0x0d,
	0x3b, 0xa4, 0x3f, 0x1b, 0xb0, 0x1a, 0x9d, 0x7a, 0x7c, 0x1c, 0x0c, 0xbe, 0x55, 0x9a, 0x90, 0x85,
	0xb8, 0xdc, 0x58, 0x1e, 0x97, 0xaf, 0x40, 0x39, 0x78, 0xcd, 0x2f, 0x14, 0x4d, 0x11, 0x2e, 0x90,
	0xe0, 0x5c, 0x34, 0x61, 0x63, 0x4d, 0x70, 0x91, 0xe0, 0xb7, 0x05, 0xec, 0x1e, 0x86, 0x41, 0x10,
	0x63, 0x18, 0xad, 0x52, 0x1d, 0x39, 0x34, 0x08, 0x62, 0xde, 0x8d, 0x38, 0xd1, 0x7d, 0x49, 0x74,
	0x23, 0x07, 0xbb, 0x7f, 0x0e, 0x6b, 0x21, 0x1b, 0xb1, 0x93, 0xe9, 0x90, 0xdf, 0x0d, 0xd0, 0x5b,
	0x08, 0x3a, 0x43, 0x53, 0xb0, 0x77, 0x24, 0x97, 0xdc, 0x05, 0xc9, 0x19, 0x3a, 0xae, 0x70, 0xb9,
	0xcb, 0x88, 0x6b, 0x08, 0xee, 0xb6, 0x60, 0x92, 0x0f, 0xa1, 0x8c, 0xa1, 0xc1, 0xb8, 0x82, 0xe1,
	0xe4, 0x66, 0xba, 0xcb, 0x9c, 0x31, 0x8b, 0x48, 0x22, 0x02, 0x89, 0x40, 0xb7, 0x3f, 0x02, 0xc8,
	0x98, 0x3f, 0x28, 0x64, 0x7c, 0xaf, 0x80, 0xbe, 0xbf, 0x9d, 0x5c, 0x83, 0x12, 0xd7, 0x54, 0x16,
	0xba, 0x26, 0xb9, 0x91, 0xfa, 0x77, 0x3e, 0x26, 0xf2, 0x70, 0x80, 0xee, 0x9e, 0xbb, 0x1c, 0xa9,
	0xc5, 0x6b, 0xd9, 0x6d, 0xd0, 0xc2, 0x60, 0x92, 0x78, 0xc7, 0x5a, 0x2a, 0x2a, 0x22, 0x16, 0xc5,
	0x4e, 0xf2, 0x10, 0xf4, 0x28, 0xd9, 0xa7, 0x74, 0x91, 0x2b, 0xf3, 0x74, 0x40, 0x33, 0x98, 0xf9,
	0x7b, 0x05, 0x80, 0x6f, 0x21, 0x9a, 0x06, 0x7e, 0xc4, 0x2e, 0xb2, 0x87, 0x77, 0x41, 0x3d, 0xf2,
	0x92, 0x4d, 0xcc, 0xbf, 0xeb, 0x71, 0x00, 0xf9, 0x05, 0xa8, 0xb6, 0xbc, 0x42, 0x9e, 0x7b, 0x2d,
	0xe5, 0x28, 0xf3, 0x5f, 0x0a, 0xbf, 0x5a, 0xf9, 0xce, 0x4f, 0xa7, 0xcb, 0x44, 0x63, 0xea, 0x79,
	0x1a, 0xcb, 0x29, 0x5c, 0x2b, 0x2a, 0xbc, 0x0d, 0x55, 0xcf, 0x3a, 0x71, 0xd8, 0x34, 0x1e, 0xcb,
	0x2b, 0x59, 0x4a, 0x17, 0xf5, 0x5c, 0xb9, 0x98, 0x9e, 0x77, 0x41, 0x1f, 0x8c, 0xad, 0x90, 0x75,
	0x66, 0xf1, 0x18, 0x43, 0x7f, 0x18, 0xc4, 0xd2, 0xc8, 0xb0, 0x9d, 0xe6, 0x63, 0x79, 0xe1, 0x44,
	0x83, 0x26, 0xa0, 0x8d, 0x83, 0x28, 0x96, 0xc6, 0x80, 0x6d, 0xf3, 0xbb, 0x12, 0x00, 0x8e, 0x24,
	0xae, 0x17, 0xef, 0x00, 0x4c, 0x59, 0xe8, 0xb9, 0x51, 0xc4, 0x17, 0x23, 0x06, 0xcc, 0x71, 0xf8,
	0x0e, 0xd9, 0xc9, 0xd4, 0x0d, 0x59, 0x24, 0x63, 0x7e, 0x42, 0x66, 0x7e, 0x2e, 0x46, 0x3f, 0xeb,
	0xe7, 0x42, 0x1f, 0xd2, 0xcf, 0xdf, 0x01, 0x18, 0x31, 0x9f, 0x85, 0x56, 0x6a, 0x5a, 0x1a, 0xcd,
	0x71, 0xd2, 0x5c, 0x56, 0x91, 0x1b, 0xe2, 0xb9, 0xec, 0x3a, 0xe8, 0xd6, 0x64, 0x12, 0xbc, 0xe6,
	0xc1, 0x16, 0x83, 0x6b, 0x95, 0x66, 0x0c, 0x9e, 0x53, 0x5e, 0xc5, 0xc1, 0x31, 0xf3, 0x31, 0x94,
	0xea, 0x54, 0x52, 0xe4, 0x3d, 0x58, 0x0d, 0x42, 0x77, 0xe4, 0x62, 0xb0, 0xe4, 0x5e, 0x4c, 0x52,
	0xcd, 0xa6, 0xfa, 0xa3, 0x09, 0xc4, 0xfc, 0x56, 0x91, 0xca, 0x38, 0x44, 0xe1, 0x7b, 0x50, 0x16,
	0x63, 0x2a, 0x78, 0x28, 0x97, 0x8b, 0xa2, 0xf2, 0x1d, 0x22, 0xe6, 0xb9, 0x0e, 0x7a, 0xe4, 0x8e,
	0x7c, 0x2b, 0x9e, 0x85, 0x89, 0x63, 0x67, 0x0c, 0xbe, 0xdf, 0x88, 0x85, 0xae, 0x35, 0x71, 0xbf,
	0x61, 0xc2, 0x84, 0xeb, 0x34, 0xc7, 0xc1, 0xcb, 0x3a, 0x63, 0xe2, 0x5a, 0x56, 0xa6, 0xd8, 0x36,
	0xff, 0x43, 0x40, 0xef, 0x0f, 0x96, 0x3f, 0x08, 0x13, 0xc3, 0x2c, 0x9d, 0x67, 0x98, 0x8f, 0xa0,
	0xec, 0x1d, 0x3b, 0x6e, 0x68, 0xfc, 0x0c, 0x51, 0x59, 0x28, 0x4b, 0x67, 0xd8, 0xdc, 0xe7, 0xfd,
	0x92, 0x78, 0xba, 0x42, 0x05, 0x9e, 0x0b, 0x86, 0x1e, 0x17, 0xbc, 0xba, 0x50, 0x90, 0x7a, 0x45,
	0x41, 0xc4, 0x73, 0xc1, 0x38, 0x98, 0xd9, 0x63, 0xe3, 0xad, 0x85, 0x82, 0x87, 0xbc, 0x3f, 0x27,
	0x88, 0x78, 0xf2, 0x18, 0x2a, 0x22, 0x7f, 0x19, 0x06, 0x4a, 0xae, 0xcf, 0x91, 0x7c, 0x8e, 0x80,
	0x4c, 0x54, 0x4a, 0x90, 0x4d, 0x28, 0x85, 0x9e, 0xf1, 0x36, 0xca, 0x5d, 0x9f, 0xbb, 0xd4, 0x4c,
	0xa6, 0x14, 0x7a, 0x7c, 0xae, 0x50, 0x24, 0x8a, 0xf6, 0xc2, 0xb9, 0x28, 0x02, 0x72, 0x73, 0x09,
	0x09, 0xf2, 0x24, 0x4b, 0x90, 0xd7, 0x50, 0xf8, 0xd6, 0x1c, 0xe1, 0x81, 0x40, 0x64, 0xd2, 0x69,
	0x16, 0x7d, 0x02, 0xab, 0xaf, 0x58, 0x88, 0x5e, 0x76, 0x7d, 0xa1, 0xf8, 0x97, 0x02, 0x91, 0x13,
	0x97, 0x32, 0x5c, 0x3c, 0x64, 0xf6, 0xa9, 0x3d, 0x61, 0xc6, 0x8d, 0x85, 0xe2, 0x54, 0x20, 0x72,
	0xe2, 0x52, 0x86, 0x3c, 0x4e, 0x52, 0xdb, 0x3b, 0x28, 0x6c, 0xce, 0x5b, 0x3a, 0x8b, 0x5f, 0x74,
	0xe2, 0x38, 0x7f, 0xb2, 0x28, 0xc2, 0x4f, 0xd6, 0x1e, 0x07, 0xaf, 0x7d, 0xe3, 0xe6, 0xc2, 0x93,
	0xdd, 0xe2, 0xfd, 0x39, 0x41, 0xc4, 0x0b, 0x41, 0x2f, 0x70, 0x8c, 0xf5, 0x73, 0x04, 0xbd, 0xc0,
	0x29, 0x08, 0x7a, 0x81, 0x43, 0x3e, 0x00, 0xd5, 0xb2, 0x27, 0xc6, 0x2d, 0x14, 0xbb, 0x31, 0x47,
	0xac, 0x63, 0x4f, 0x32, 0x21, 0x8e, 0x15, 0xe6, 0xc7, 0x5d, 0xd7, 0x3c, 0xc7, 0xfc, 0x8e, 0x99,
	0x5f, 0x30, 0xbf, 0x63, 0xe6, 0xb7, 0x87, 0x50, 0xcf, 0x7b, 0x82, 0x4c, 0x0b, 0xca, 0xa2, 0xb4,
	0x70, 0x1d, 0xf4, 0x90, 0xd9, 0xb3, 0x30, 0x72, 0x5f, 0x09, 0x17, 0xac, 0xd2, 0x8c, 0x91, 0x3e,
	0x9f, 0x54, 0x7c, 0x56, 0x61, 0xbb, 0xfd, 0x00, 0xea, 0x79, 0x8f, 0x59, 0x32, 0x01, 0x87, 0xe7,
	0xfd, 0x64, 0x19, 0x7c, 0x0f, 0x1a, 0x05, 0xe7, 0xb8, 0xc0, 0xfa, 0xfd, 0x20, 0xb1, 0x24, 0x59,
	0x9e, 0x49, 0x19, 0xed, 0x23, 0xd0, 0x53, 0x97, 0xf9, 0x71, 0x9a, 0x38, 0x7f, 0x9e, 0x1d, 0x68,
	0x14, 0xdc, 0x6c, 0xd9, 0x5c, 0x57, 0xa1, 0x12, 0x5b, 0xe1, 0x88, 0xc5, 0x32, 0xd4, 0x4a, 0xaa,
	0xbd, 0x0b, 0xcd, 0xa2, 0xc7, 0xfd, 0xbf, 0x03, 0x7d, 0xaf, 0x40, 0xb3, 0xe8, 0x7c, 0xcb, 0x46,
	0xfa, 0x54, 0x5c, 0x4f, 0x4a, 0x78, 0xc1, 0x78, 0xb0, 0xd4, 0x97, 0x37, 0xbf, 0xec, 0xd2, 0x41,
	0xef, 0x59, 0x7f, 0xb8, 0xb5, 0xbf, 0x8d, 0x57, 0x16, 0x9e, 0x23, 0x3c, 0xeb, 0x24, 0x89, 0x09,
	0x2a, 0x66, 0x82, 0x1c, 0xc7, 0xdc, 0x84, 0x5a, 0x4e, 0x86, 0x00, 0x54, 0xb6, 0x68, 0xb7, 0x73,
	0xd8, 0x6d, 0xad, 0x10, 0x1d, 0xca, 0x07, 0xcf, 0xe9, 0x6e, 0xb7, 0xa5, 0x90, 0x2a, 0x68, 0x7b,
	0xbd, 0xc1, 0x61, 0xab, 0xd4, 0x7e, 0x1f, 0x9a, 0x45, 0xff, 0x5f, 0x66, 0x3a, 0xff, 0x55, 0x60,
	0xed, 0x8c, 0xd3, 0x2f, 0xdb, 0xf4, 0x4e, 0xfa, 0xe2, 0x2e, 0x61, 0x72, 0xdd, 0x5c, 0x1e, 0x47,
	0xe6, 0x3e, 0xbd, 0x0b, 0xb6, 0xa3, 0x9e, 0xb5, 0x1d, 0x13, 0xea, 0xc7, 0xec, 0x34, 0x8a, 0x03,
	0x87, 0x4d, 0x58, 0xcc, 0x2f, 0xad, 0xea, 0x86, 0x4e, 0x0b, 0xbc, 0x1f, 0xf1, 0x50, 0x6f, 0x1f,
	0x42, 0x3d, 0x1f, 0xaf, 0x96, 0xed, 0xf9, 0x6e, 0x72, 0xcf, 0x59, 0x90, 0x70, 0x45, 0x6f, 0xbb,
	0xc3, 0x47, 0xcd, 0x82, 0xd9, 0xb2, 0x51, 0x93, 0x48, 0x51, 0xca, 0x45, 0x8a, 0xbf, 0x96, 0x00,
	0xb2, 0xc8, 0xb6, 0x6c, 0x84, 0x4f, 0xf2, 0x06, 0x78, 0xef, 0xdc, 0x20, 0xb9, 0xd9, 0xd9, 0xda,
	0x1b, 0x6e, 0x3d, 0xdb, 0xdf, 0xef, 0xf4, 0xa5, 0xf1, 0x9d, 0x7f, 0x00, 0x8f, 0x0b, 0x45, 0x82,
	0x77, 0x97, 0x8f, 0x9d, 0xbb, 0x56, 0x13, 0xd0, 0xc2, 0xd9, 0x44, 0x3c, 0xb1, 0x75, 0x8a, 0x6d,
	0xf3, 0x01, 0xd4, 0x72, 0x2b, 0xe0, 0x36, 0xdb, 0x7f, 0xd6, 0xe7, 0x86, 0x0c, 0x50, 0xd9, 0x7f,
	0xb6, 0xdd, 0xdb, 0x79, 0x99, 0xb7, 0x64, 0xf3, 0x2e, 0x54, 0x93, 0x41, 0x49, 0x1d, 0xaa, 0xcf,
	0x07, 0x5d, 0x3a, 0xec, 0x6c, 0xed, 0xb5, 0x56, 0x48, 0x0d, 0x56, 0x07, 0x2f, 0x07, 0x48, 0x28,
	0xed, 0x8f, 0x79, 0xa4, 0xcc, 0x42, 0xfa, 0x92, 0xdb, 0x9b, 0x80, 0x0a, 0xc4, 0x67, 0x3a, 0xac,
	0xda, 0x81, 0xe7, 0x59, 0xbe, 0x63, 0x7e, 0x5b, 0x06, 0xe0, 0xfb, 0x92, 0x0f, 0x98, 0x47, 0x50,
	0x66, 0x61, 0x18, 0x84, 0x72, 0x90, 0x62, 0x96, 0x15, 0x98, 0xcd, 0x2e, 0x07, 0x24, 0x14, 0x15,
	0xf8, 0x7c, 0x7e, 0x17, 0x86, 0x72, 0x7b, 0x9e, 0x68, 0x1a, 0x14, 0xa4, 0xf0, 0xbc, 0xfc, 0xae,
	0x2e, 0x16, 0x4f, 0x1d, 0x3c, 0x11, 0x4f, 0xf2, 0xbb, 0xcc, 0x98, 0xda, 0x9c, 0xe4, 0x27, 0x45,
	0xf1, 0xc4, 0xa4, 0x18, 0xc7, 0xb6, 0x3f, 0x84, 0x46, 0x61, 0x23, 0xfc, 0xe4, 0x6c, 0x6e, 0x92,
	0x8a, 0x30, 0x49, 0xde, 0xc6, 0xe2, 0x4e, 0x34, 0x92, 0x8f, 0x0a, 0xde, 0x6c, 0xff, 0x53, 0x81,
	0xb5, 0x33, 0xbb, 0xb8, 0x98, 0x24, 0xf9, 0x1c, 0xaa, 0x72, 0xb7, 0x91, 0xa1, 0x62, 0xf8, 0x78,
	0xff, 0x02, 0x2a, 0x4a, 0xe8, 0x9e, 0x7f, 0x14, 0xd0, 0x74, 0x80, 0xf6, 0x17, 0x50, 0xcb, 0x75,
	0x2c, 0xf3, 0x95, 0xb4, 0xe6, 0x58, 0x5a, 0x5c, 0x73, 0x6c, 0x3f, 0x82, 0xb5, 0x33, 0xfa, 0xbd,
	0xa0, 0x4a, 0x76, 0xa1, 0x96, 0xd3, 0xee, 0x05, 0xb5, 0x91, 0xf8, 0x89, 0x9a, 0xf3, 0x93, 0x7b,
	0xd0, 0xe8, 0x47, 0x83, 0xd8, 0x8a, 0x97, 0xbe, 0x02, 0xcc, 0xbf, 0xa8, 0xd0, 0x4c, 0xb0, 0xe7,
	0xcc, 0x4b, 0x40, 0x63, 0xd9, 0xc4, 0xd8, 0xe6, 0x91, 0x31, 0x8a, 0xad, 0x38, 0x99, 0x5a, 0x10,
	0x3c, 0x33, 0xfa, 0xe2, 0x2b, 0x8c, 0xa8, 0x15, 0x4b, 0x8a, 0xac, 0x43, 0xcd, 0x4f, 0x3f, 0xfc,
	0x44, 0xf2, 0xed, 0x96, 0x67, 0x91, 0x6b, 0xa0, 0x7f, 0x15, 0x04, 0xf1, 0x10, 0x15, 0x5c, 0x11,
	0x6f, 0x5d, 0xce, 0xc0, 0x0f, 0x2a, 0x37, 0xa1, 0x66, 0xcf, 0x42, 0xac, 0x57, 0x1f, 0xb9, 0x0e,
	0xbe, 0xe3, 0x34, 0x0a, 0x92, 0xb5, 0xe3, 0x3a, 0x79, 0x80, 0xed, 0x3a, 0xf8, 0x9a, 0xcb, 0x00,
	0x5b, 0x02, 0xe0, 0x31, 0x6f, 0xf8, 0xca, 0x0d, 0xe3, 0x99, 0x35, 0xc1, 0x12, 0x98, 0x46, 0xc1,
	0x63, 0xde, 0x97, 0x82, 0x43, 0x6e, 0x41, 0x9d, 0x03, 0x42, 0x16, 0xb9, 0x0e, 0xf3, 0x63, 0x59,
	0xef, 0xe2, 0x42, 0x54, 0xb2, 0xf8, 0x12, 0x39, 0x24, 0xe2, 0x81, 0x40, 0x96, 0xbd, 0xaa, 0x1e,
	0xf3, 0x30, 0x30, 0x90, 0x1b, 0xc0, 0x47, 0x1b, 0x8e, 0xc2, 0xe0, 0x75, 0x3c, 0xc6, 0xe2, 0x97,
	0x46, 0x39, 0x7c, 0x17, 0x19, 0xfc, 0x0c, 0xe2, 0x71, 0xc8, 0x2c, 0x27, 0xc2, 0xea, 0x97, 0x46,
	0x13, 0x92, 0x1f, 0xea, 0x91, 0x13, 0x61, 0x9d, 0x4b, 0xa3, 0xbc, 0xc9, 0x95, 0x38, 0x9b, 0xa2,
	0x1e, 0xd6, 0x84, 0x12, 0x05, 0x65, 0xfe, 0x4d, 0x85, 0xc6, 0xbe, 0xe5, 0xbb, 0x13, 0x2b, 0x39,
	0xd9, 0x4f, 0xa1, 0x1e, 0x8a, 0xe6, 0x30, 0x57, 0xa8, 0xc8, 0xde, 0x30, 0xfb, 0x9d, 0x7e, 0x6f,
	0xaf, 0x33, 0xa4, 0xdd, 0x2f, 0x9e, 0x77, 0x07, 0x87, 0x22, 0xc0, 0xd6, 0xa4, 0xc4, 0x21, 0x8f,
	0xb3, 0x6f, 0x43, 0x95, 0xdb, 0xc2, 0xf0, 0xcc, 0x97, 0xb0, 0xcf, 0x45, 0xed, 0x01, 0xbf, 0x36,
	0xda, 0xc1, 0x24, 0xa9, 0x2d, 0x27, 0x34, 0xdf, 0x2c, 0x6a, 0x61, 0x98, 0x2f, 0x2e, 0x23, 0x07,
	0xbf, 0xe6, 0xac, 0x43, 0xcd, 0x61, 0x91, 0x1d, 0xba, 0xd3, 0xf4, 0xa5, 0xae, 0xd3, 0x3c, 0x8b,
	0xcf, 0x2b, 0x06, 0x90, 0x9f, 0x94, 0x74, 0xba, 0x8a, 0x74, 0xcf, 0x21, 0x77, 0xa0, 0x29, 0xba,
	0x44, 0xd1, 0x4e, 0x1e, 0xb7, 0x4e, 0xeb, 0xc8, 0xdd, 0xe5, 0x4c, 0xf1, 0xdd, 0xe9, 0xeb, 0x59,
	0x10, 0x5b, 0x78, 0xd4, 0x65, 0x2a, 0x08, 0xae, 0x65, 0x3b, 0x64, 0x56, 0x1c, 0x84, 0x78, 0xc2,
	0x3a, 0x4d, 0x48, 0xae, 0x53, 0x26, 0x4a, 0x0a, 0x20, 0x5e, 0xfa, 0x82, 0xe2, 0xc7, 0x6e, 0x39,
	0x9e, 0xeb, 0x0f, 0x65, 0x6f, 0x4d, 0xac, 0x15, 0x79, 0xdd, 0xb4, 0xbc, 0x28, 0x16, 0x84, 0x55,
	0x90, 0x7a, 0x6e, 0xb3, 0x4f, 0x83, 0x28, 0x26, 0x77, 0x93, 0xf5, 0x26, 0x05, 0x56, 0x3c, 0x60,
	0x9d, 0x36, 0x90, 0x9b, 0x14, 0x53, 0xcd, 0x7f, 0x28, 0xd0, 0x4c, 0x0e, 0x4f, 0xba, 0x9a, 0x74,
	0x67, 0xa5, 0xe0, 0xce, 0x76, 0x92, 0xcf, 0xcb, 0xd2, 0xf9, 0x6e, 0x00, 0xc4, 0x41, 0x6c, 0x4d,
	0x86, 0xb3, 0x48, 0x56, 0x01, 0x54, 0xaa, 0x23, 0xe7, 0x79, 0xc4, 0xf8, 0xc5, 0xa2, 0x29, 0xba,
	0x6d, 0x6b, 0x6a, 0xd9, 0x6e, 0x2c, 0x6a, 0x48, 0x2a, 0x6d, 0x20, 0x77, 0x4b, 0x32, 0xc9, 0xbb,
	0xb0, 0xe6, 0xb3, 0xd7, 0xc2, 0x76, 0x87, 0x42, 0x73, 0x65, 0x81, 0xf3, 0xd9, 0x6b, 0xb4, 0xe0,
	0x2f, 0x50, 0x83, 0x77, 0xa0, 0x99, 0xe1, 0x72, 0xd5, 0x94, 0x7a, 0x02, 0x3b, 0xb0, 0xe2, 0xf1,
	0xfd, 0xf7, 0x40, 0xc3, 0xbc, 0x5a, 0x05, 0x6d, 0xa7, 0xb7, 0xc7, 0x73, 0x70, 0x03, 0xf4, 0xad,
	0x67, 0xfd, 0xc3, 0x4e, 0xaf, 0xdf, 0xa5, 0x2d, 0x85, 0xa7, 0x58, 0x9e, 0x86, 0x7b, 0xfd, 0xdd,
	0x56, 0xe9, 0xfe, 0x1f, 0x14, 0xb8, 0x3c, 0xc7, 0x12, 0x49, 0x0b, 0xea, 0xe2, 0x32, 0x3a, 0x1c,
	0x3c, 0xed, 0x50, 0x3e, 0x4a, 0x0b, 0xea, 0xdb, 0xdd, 0xbd, 0x6e, 0xca, 0x51, 0x38, 0xa7, 0xfb,
	0xe2, 0xb0, 0xdb, 0xdf, 0x96, 0x9c, 0x12, 0xe7, 0x0c, 0x9e, 0xd2, 0x5e, 0xff, 0x73, 0xc9, 0x51,
	0xc9, 0x65, 0x58, 0xdb, 0xef, 0xf4, 0x3b, 0xbb, 0xdd, 0x61, 0xf7, 0x85, 0x9c, 0x54, 0xc3, 0x94,
	0xdf, 0x17, 0xec, 0x56, 0x99, 0x10, 0x68, 0xee, 0x76, 0x0f, 0x87, 0x5b, 0x9d, 0x83, 0xce, 0x56,
	0xef, 0xb0, 0xd7, 0x1d, 0xb4, 0x2a, 0x0f, 0xff, 0xad, 0x82, 0xda, 0x0d, 0x22, 0xf2, 0x10, 0xb4,
	0x03, 0xd7, 0x1f, 0x91, 0xac, 0x7a, 0x96, 0xfb, 0xa6, 0xde, 0x26, 0x67, 0xb8, 0xd3, 0xc9, 0xa9,
	0xb9, 0x42, 0x3e, 0x80, 0xd2, 0xfe, 0x36, 0x21, 0xb9, 0x1c, 0x91, 0xe0, 0x2f, 0x17, 0x78, 0xe2,
	0xa4, 0xcd, 0x95, 0x5f, 0x2a, 0xe4, 0x43, 0xd0, 0x76, 0x5c, 0xdf, 0x21, 0xf9, 0x62, 0x65, 0x5a,
	0x6a, 0x5c, 0x2c, 0xf6, 0x09, 0x54, 0x44, 0x84, 0x26, 0x57, 0xb3, 0x3c, 0x97, 0x0f, 0xef, 0xed,
	0xb7, 0xde, 0xe0, 0x27, 0xe2, 0xe4, 0xb7, 0xb0, 0x76, 0xe6, 0xa3, 0x3d, 0xb9, 0xf9, 0x66, 0x0d,
	0xb4, 0xf0, 0x1d, 0xbd, 0x9d, 0xad, 0x2f, 0xf7, 0x21, 0xdc, 0x5c, 0x21, 0xbf, 0x01, 0xc8, 0x3e,
	0xba, 0x93, 0x76, 0xa1, 0xe4, 0x7a, 0xb1, 0x11, 0x3e, 0x00, 0xad, 0x7b, 0xc2, 0xec, 0x9c, 0xda,
	0xd2, 0xab, 0x60, 0x6e, 0xff, 0x59, 0x12, 0x37, 0x57, 0xc8, 0x53, 0xb8, 0x2c, 0x9c, 0x66, 0xc0,
	0xc2, 0x57, 0x2c, 0x7d, 0x60, 0x64, 0xaa, 0x28, 0xc4, 0xc3, 0x9c, 0x2a, 0x8a, 0xae, 0x66, 0xae,
	0x7c, 0xf6, 0x00, 0xd6, 0xdc, 0x60, 0x13, 0x7f, 0xa2, 0x90, 0x98, 0xcf, 0xaa, 0xdd, 0x20, 0xc2,
	0x72, 0xdc, 0x81, 0xf2, 0xbb, 0x6a, 0xf2, 0x8b, 0xc5, 0x9f, 0x4a, 0x6a, 0xf7, 0xd9, 0xe0, 0xab,
	0x0a, 0xc6, 0xba, 0x5f, 0xfd, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x9f, 0xf4, 0xea, 0xfc, 0x7b, 0x21,
	0x00, 0x00,
}
