// Copyright 2018-2021 CERN
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// In applying this license, CERN does not waive the privileges and immunities
// granted to it by virtue of its status as an Intergovernmental Organization
// or submit itself to any jurisdiction.

package useragent

import (
	"strings"

	ua "github.com/mileusna/useragent"
)

// isWeb returns true if the useragent is generated by the web
func isWeb(ua *ua.UserAgent) bool {
	return ua.IsChrome() || ua.IsEdge() || ua.IsFirefox() || ua.IsSafari() ||
		ua.IsInternetExplorer() || ua.IsOpera() || ua.IsOperaMini()
}

// isMobile returns true if the useragent is generated by the mobile
func isMobile(ua *ua.UserAgent) bool {
	// workaround as the library does not recognise iOS string inside the user agent
	isIOS := ua.IsIOS() || strings.Contains(ua.String, "iOS")
	return !isWeb(ua) && (ua.IsAndroid() || isIOS)
}

// isDesktop returns true if the useragent is generated by a desktop application
func isDesktop(ua *ua.UserAgent) bool {
	return ua.Desktop && !isWeb(ua)
}

// isGRPC returns true if the useragent is generated by a grpc client
func isGRPC(ua *ua.UserAgent) bool {
	return strings.HasPrefix(ua.Name, "grpc")
}

// getCategory returns the category of the user agent
// (i.e. if it is a web, mobile, desktop or grpc user agent)
func getCategory(ua *ua.UserAgent) string {
	switch {
	case isWeb(ua):
		return "web"
	case isMobile(ua):
		return "mobile"
	case isDesktop(ua):
		return "desktop"
	case isGRPC(ua):
		return "grpc"
	default:
		return ""
	}
}

// IsUserAgentAllowed return true if the user agent corresponds
// to one in the allowed user agents list
func IsUserAgentAllowed(ua *ua.UserAgent, allowedUserAgents []string) bool {
	cat := getCategory(ua)
	for _, userAgent := range allowedUserAgents {
		if userAgent == cat {
			return true
		}
	}
	return false
}
